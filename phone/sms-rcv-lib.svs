function sms_init {
  t_sms_rcv  = 0;
  t_sms_send = 0;
  t_sms_del  = 0;
  t_sms_enc  = 0;
  t_sms_enc2 = 0;
  sms_enc_sw = 0;
  sms_cmd    = "";
}


function sms_send { # number, text -> returns 
  # send sms
  if (DEBUG) print("sending: num: " + arg0 + " text: " + arg1);
  if (DEBUG) print("AT_COMMAND: " + "AT+CMGS=\"" + str2u16(nospace(arg0)) + "\"\n" + str2u16(arg1) + "\n(ASCII 26)     \n\n");
  sms_h_add(arg0, "OUTGOING", arg1, sys.time.get() + "");
  
  # detect UTF16 characters
  if (len(arg1) == rlen(arg1)) {
    if (DEBUG) print("SMS: GSM");
    if (DEBUG) print("AT_COMMAND: " + "AT+CMGS=\"" + nospace(arg0) + "\"\r" + arg1 + "\n(ASCII 26)     \n\n");
    t_sms_send = at_command("AT+CMGS=\"" + nospace(arg0) + "\"\r" + arg1, 2500);
  } else {
    if (DEBUG) print("SMS: UCS2");
    # switch encoding
    t_sms_enc  =  at_command("AT+CSCS=\"UCS2\"");
    sms_enc_sw = 1;
    sms_cmd    = "AT+CMGS=\"" + str2u16(nospace(arg0)) + "\"\r" + str2u16(arg1);
    if (DEBUG) print("AT_COMMAND: " + sms_cmd);
    
    return;
  }
  
  
  sys.com.qClr();
  sys.com.qAdd(26);
  sys.com.uartTrsQ();
}

function sms_send_u {
  t_sms_send = at_command(sms_cmd, 2500);
  sys.com.qClr();
  sys.com.qAdd(26);
  sys.com.uartTrsQ();
}


function sms_retrive {
  cur_msg  = 1;
  at_quiet = 1;
  new_sms_flg = 0;
  
  t_sms_rcv = at_command("AT+CMGR=" + cur_msg, 50);
}


function nospace {
  if (not instr(arg0, " ")) {
    return arg0;
  }
  local i;
  local s = "";
  for(i = 1; i <= len(arg0); i++;) {
    if (getcp(arg0, i) != " ") {
      s += getcp(arg0, i);
    }
  }
  return s;
}


## sms history file handling
function sms_h_add { # arg0:contact number, arg1:way(INCOMMING, OUTGOING), arg2:text, arg3:timestamp
  local id = 0;
  sys.fs.chDir();
  sys.fs.chDir("appdata");
  mk_safe_dir("phone");
  sys.fs.chDir("phone");
  mk_safe_dir("sms");
  sys.fs.chDir("sms");
  
  sys.fs.conf.open("n" + mk_safe_name(arg0) +  ".dat");
  
  # with emty file, the exists function sometimes borks on the device...
  sys.fs.conf.write("contact_number", "" + arg0);
  #* use this after the bug gets fixed...
  if(not sys.fs.conf.exists("contact_number")) {
    sys.fs.conf.write("contact_number", "" + arg0);
  }
  *#
  
  if(not sys.fs.conf.exists("contact_name")) {
    local info;
    info = cont_get_info(arg0);
    sys.fs.chDir("phone");
    sys.fs.chDir("sms");
    sys.fs.conf.open("n" + mk_safe_name(arg0) +  ".dat");
    if(info[0] != "Unknown") {
      sys.fs.conf.write("contact_name", "" + info[0] + " " + info[1]);
    } else {
      sys.fs.conf.write("contact_name", "" + arg0);
    }
  }
  
  while(sys.fs.conf.exists("msg_" + id)) {
    id++;
  }
  
  sys.fs.conf.write("ts_" + id, "" + arg3);
  sys.fs.conf.write("msg_" + id, arg2);
  sys.fs.conf.write("omsg_" + id, arg4 + "");
  sys.fs.conf.write("dir_" + id, arg1);
  
  if(arg1 == "INCOMMING") {
    sys.fs.conf.write("new_message", "1");
    new_sms_flg += 1;
  }
  sys.fs.conf.close();
  return "n" + mk_safe_name(arg0) +  ".dat";
}


## update messages/read them from sim800
function sms_upd {
  local res;
  local msg;
  
  # Reading messages from memory
  res = at_result(t_sms_rcv);
  if(res == 1) {
    gc(-1);
    print("msg" + cur_msg + ":");
    if (DEBUG) print("AT_RESULT: " + at_result);
    # parse message
    if(not instr(at_result, "+CMGR")) {
      print("ERR: Wrong result, retry");
      t_sms_rcv = at_command("AT+CMGR=" + cur_msg, 50);
      return;
    } else {
      msg = sms_parse(at_result);
      if (msg[0] != "") {
        print(" sms_num: " + msg[0] + " ");
        print(" sms_tim: " + msg[1] + " ");
        if(msg[3] == 1) {
          print(" sms_U16: " + u16toStr(msg[2]) + " ");
          sms_h_add(msg[0], "INCOMMING", u16toStr(msg[2]), sms_get_ts(msg[1]), msg[2]);
        } else {
          print(" sms_txt: " + msg[2] + " ");
          sms_h_add(msg[0], "INCOMMING", msg[2], sms_get_ts(msg[1]), msg[2]);
        }
        
      }
      
      #*if(msg[0] == "") {
        cur_msg = 20; # nothing detected, skipping
      }*#
    }
    
    cur_msg++;
    if(cur_msg < 11) {
      t_sms_rcv = at_command("AT+CMGR=" + cur_msg, 50);
    } else {
      #delete messages
      t_sms_del = at_command("AT+CMGDA=\"DEL READ\"", 100);
    }
  }
  
  if(res == 2) {
    print("Msg fail: " + at_result + " (end)");
    print("retry: " + cur_msg);
    t_sms_rcv = at_command("AT+CMGR=" + cur_msg, 50);
  }
  
  # Removing old messages
  res = at_result(t_sms_del);
  if(res == 1) {
    print("Messages loaded, deleted from sim800");
    #call finish
    sms_fin_cb();
  }
  
  if(res == 2) {
    print("Message delete error. retry..");
    t_sms_del = at_command("AT+CMGDA=\"DEL READ\"");
  }
  
  # Sending SMS
  res = at_result(t_sms_send);
  if(res == 1) {
    print("Sms send ok!");
    if (DEBUG) print("AT_RESULT: " + at_result);
    if (sms_enc_sw == 0) {
      sms_send_cb(1);
    } else {
      t_sms_enc2  =  at_command("AT+CSCS=\"GSM\"");
    }
    
  }
  
  if(res == 2) {
    if (DEBUG) print("AT_RESULT: " + at_result);
    print("Sms send FAILED!");
    if (sms_enc_sw == 1) {
      # switch it without checking...
      sys.com.uartTrs("AT+CSCS=\"GSM\"" + "\r\n");
    }
    sms_send_cb(0);
  }
  
  # Change sms encoding to UCS2
  res = at_result(t_sms_enc);
  if(res == 1) {
    # send sms
    sms_send_u();
  }
  
  if(res == 2) {
    print("sms_upd: Encoding change failed");
    if (DEBUG) print("AT_RESULT: " + at_result);
    sms_send_cb(0);
  }
  
  # Change encoding back
  res = at_result(t_sms_enc2);
  if(res == 1) {
    sms_send_cb(1);
  }
  
  if(res == 2) {
    print("sms_upd: Encoding change failed (2)");
    t_sms_enc2  =  at_command("AT+CSCS=\"GSM\"");
  }
}


function mk_safe_dir {
  if (not(sys.fs.exists(arg0) and sys.fs.isDir(arg0))) {
    sys.fs.mkDir(arg0);
  }
  sys.fs.chDir(arg0);
}


function mk_safe_name {
  local accepted = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
  local i;
  local r = "";
  for (i = 1; i <= len(arg0); i++;) {
    if (instr(accepted, getcp(arg0, i))) {
      r += getcp(arg0, i);
    }
  }
  return r;
}

## message parser
function sms_parse {
  local array nfo[4];
  
  local str = arg0;
  
  local s = sms_getparam(str, 2);
  nfo[0] = substr(s, 2, len(s) - 1);  # number
  
  s = sms_getparam(str, 4) + "," + sms_getparam(str, 5);
  nfo[1] = substr(s, 2, len(s) - 1);  # timestamp
  
  if (sms_getparam(str, 9) == "8") {
    nfo[3] = 1; # UCS2
  } else {
    nfo[3] = 0;
  }
  
  str = substr(str, instr(str, "\r") + 2, len(str));
  str = substr(str, instr(str, "\r") + 2, len(str));
  
  nfo[2] = substr(str, 1, instr(str, "\n") - 1);  # string
  
  return nfo;
}


## sms getparam
function sms_getparam #*str, num*# {
  local s = arg0;
  local i = 0;
  while(instr(s, ",")) {
    i++;
    if(i == arg1) {
      return substr(s, 1, instr(s, ",") - 1);
    }
    s = substr(s, instr(s, ",") + 1, len(s));
  }
  i++;
  if(i == arg1) {
    return s;
  }
  
  return "";
}


## U16 Tools 
function str2u16 {
  local out = "";
  local pos = 1;
  
  local array hex = ["A", "B", "C", "D", "E", "F"];
  
  while(pos <= len(arg0)) {
    local n = getcp(arg0, pos);
    #print(n);
    
    # ASCII
    if (charval(n) > 31 and charval(n) < 127) {
      local lb = "";
      local hb = "";
      if (charval(n)/16 < 10) {
        hb = "" + charval(n)/16;
      } else {
        hb = hex[charval(n)/16 - 10];
      }
      
      if (charval(n)%16 < 10) {
        lb = "" + charval(n)%16;
      } else {
        lb = hex[charval(n)%16 - 10];
      }
      
      out += "00" + hb + lb;
    }
    
    # codetable
    if (n == "á") out += "00E1";
    if (n == "é") out += "00E9";
    if (n == "ě") out += "011B";
    if (n == "í") out += "00ED";
    if (n == "ý") out += "00FD";
    if (n == "ó") out += "00F3";
    if (n == "ů") out += "016F";
    if (n == "ú") out += "00FA";

    if (n == "Á") out += "00C1";
    if (n == "É") out += "00C9";
    if (n == "Ě") out += "011A";
    if (n == "Í") out += "00CD";
    if (n == "Ý") out += "00DD";
    if (n == "Ó") out += "00D3";
    if (n == "Ů") out += "016E";
    if (n == "Ú") out += "00DA";

    if (n == "š") out += "0161";
    if (n == "č") out += "010D";
    if (n == "ř") out += "0159";
    if (n == "ž") out += "017E";
    if (n == "ť") out += "0165";
    if (n == "ď") out += "010F";
    if (n == "ň") out += "0148";
    #0160 010c 0158 017d 0164 010e 0147
    if (n == "Š") out += "0160";
    if (n == "Č") out += "010C";
    if (n == "Ř") out += "0158";
    if (n == "Ž") out += "017D";
    if (n == "Ť") out += "0164";
    if (n == "Ď") out += "010E";
    if (n == "Ň") out += "0147";
    pos++;
  }
  return out;
}


function u16toStr {
  local out = "";
  local pos = 0;
  
  while(pos*4 <= len(arg0)) {
    local n = substr(arg0, 1 + pos*4, pos*4+4);
    if(substr(n, 1, 2) == "00" and ((31 < num("0x" + substr(n, 3, 4))) and num("0x" + substr(n, 3, 4)) < 127) ) {
      out += charval(num("0x" + substr(n, 3, 4)));
    } else {
      known = 0;
      #00e1 00e9 00ed 00f3 016f 00fa
      if (n == "00E1") {out += "á"; known = 1;}
      if (n == "00E9") {out += "é"; known = 1;}
      if (n == "011B") {out += "ě"; known = 1;}
      if (n == "00ED") {out += "í"; known = 1;}
      if (n == "00FD") {out += "ý"; known = 1;}
      if (n == "00F3") {out += "ó"; known = 1;}
      if (n == "016F") {out += "ů"; known = 1;}
      if (n == "00FA") {out += "ú"; known = 1;}
      #00c1 00c9 00cd 00d3 016e 00da
      if (n == "00C1") {out += "Á"; known = 1;}
      if (n == "00C9") {out += "É"; known = 1;}
      if (n == "011A") {out += "Ě"; known = 1;}
      if (n == "00CD") {out += "Í"; known = 1;}
      if (n == "00DD") {out += "Ý"; known = 1;}
      if (n == "00D3") {out += "Ó"; known = 1;}
      if (n == "016E") {out += "Ů"; known = 1;}
      if (n == "00DA") {out += "Ú"; known = 1;}
      #0161 010d 0159 017e 0165 010f 0148
      if (n == "0161") {out += "š"; known = 1;}
      if (n == "010D") {out += "č"; known = 1;}
      if (n == "0159") {out += "ř"; known = 1;}
      if (n == "017E") {out += "ž"; known = 1;}
      if (n == "0165") {out += "ť"; known = 1;}
      if (n == "010F") {out += "ď"; known = 1;}
      if (n == "0148") {out += "ň"; known = 1;}
      #0160 010c 0158 017d 0164 010e 0147
      if (n == "0160") {out += "Š"; known = 1;}
      if (n == "010C") {out += "Č"; known = 1;}
      if (n == "0158") {out += "Ř"; known = 1;}
      if (n == "017D") {out += "Ž"; known = 1;}
      if (n == "0164") {out += "Ť"; known = 1;}
      if (n == "010E") {out += "Ď"; known = 1;}
      if (n == "0147") {out += "Ň"; known = 1;}
      
      if (known == 0 and len(n) == 4) {
        out += "?" + n + "?";
      }
    }
    pos++;
  }
  return out;
}

function sms_get_ts {
 # example: 23/12/09,16:50:53+04
 # timezone is ignored for now...
 return sys.time.setTs(
          2000+num(substr(arg0, 1, 2)),
          num(substr(arg0, 4, 5)),
          num(substr(arg0, 7, 8)),
          num(substr(arg0, 10, 11)),
          num(substr(arg0, 13, 14)),
          num(substr(arg0, 16, 17))
        );
}
