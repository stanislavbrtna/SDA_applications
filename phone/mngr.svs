import "~cont-tools.svs"
import "~hist-tools.svs"
import "~msg-tool.svs"
import "~at-cmd.svs"
import "~mngr-misc.svs"

function init {

  OVERLAY = 1;
  DEBUG = 0;

  # AT init commands
  array initcmds = [
                    "AT+CFUN=1",          # full phone functionality
                    "AT+CALS=0,0",        # disable ring tone
                    "AT+CLTS=1",          # enable clock from network
                    "AT+CMGF=1",          # set sms as text mode
                    "AT+CSCLK=1",         # enable sleep by sleep pin
                    "AT+CSCS=\"UCS2\"",   # set encoding to UCS2
                    "AT+CSMP=17,167,0,8"  # enable UCS2/UTF16 messaging
                   ];

  # setup all that hacky stuff
  sys.os.setSingular();
  sys.os.noClose(1);
  sys.hw.claim(INT_EXP_PORT);
  sys.hw.claim(EXT_EXP_PORT);
  sys.hw.claim(SERIAL_PORT);
  
  sys.hw.btn.stdbyEn(1);
  
  at_init();

  # dummy screen, somehow os sometimes launches in this screen...
  sys.gui.addText(0, 0, 5, 1, "Phone manager", sys.gui.addScreen());
  
  scr = sys.gui.addScreen();
  sys.gui.setXscroll(scr, -16);
  sys.gui.setYscroll(scr, -16);
  
  sys.gui.setRelInit(1);
  
  tStat = sys.gui.addText(0, 0, 5, 1, "Status", scr);
  tOperator = sys.gui.addText(0, 1, 3, 1, "...", scr);
  bOptions = sys.gui.addButton(0,2, 3, 1, "Options", scr);

  init_gui();

  opt_scr = sys.gui.addScreen();
  
  optAirplane = sys.gui.addCheckBox(0, 0, 8, 1, "Airplane mode", opt_scr);
  bDebug      = sys.gui.addCheckBox(0, 1, 8, 1, "Debug mode", opt_scr);
  bSMSRcv     = sys.gui.addButton(0, 2, 6, 1, "Receive SMS", opt_scr);
  tSMS        = sys.gui.addText(0, 3, 10, 1, "", opt_scr);
  bBack       = sys.gui.addButton(0, 10, 3, 1, "Close", opt_scr);
  
  inOpt = 0;
  
  sys.gui.setXscroll(opt_scr, -16);
  sys.gui.setYscroll(opt_scr, -16);
  #*
  todo:
         - settings: ringtone
         - airplane mode
  
         - pin screen
  *#
  
  at_quiet = 1;
  t_cpin = 0; # check pin ticket
  t_spin = 0; # set pin ticket
  t_dummy = 0;
  t_clcc = 0;
  
  t_csq = 0;
  t_cspn = 0;
  t_cfun = 0;
  
  sms_init();
  
  print("SDA Phone manager init!");
  
  t_at = at_command("AT", 1);
  
  sys.fs.chDir("appdata");
  if(not sys.fs.exists("phone")) {
    sys.fs.mkDir("phone");
  }
  
  pinOk = 0;
  inCall = 0;
  exit_flag = 0;
  Airplane = 0;
  sms_exit_fl = 0;
  sms_rcv_fl  = 0;
  
  STATUS_FLG = 0;
  PIN_FLG = 0;
  pin_num = arg1;
  
  CALL_FLG = 0;
  number = "";
  
  mngr_status = "";
  mngr_in_init = 1;
  
  sms_read = 0;
  sms_delay_s = 300;
  
  gsm_signal = 0;
  gsm_signal_l = 0;
  
  gui_wkup = 0;
  
  lcd_off_fl = 0;
  
  set_status("INIT");
  
  # arg0 - type of request
  process_args(arg0, arg1, arg2);
  set_icon(0);
}


function init_gui { 
  if(OVERLAY == 1) {
    sys.os.gui.setMainScr(0);
    local s = sys.gui.addScreen();
    sys.gui.addFrame(0, 0, 10, 8, scr, s);
    selfOvr = sys.o.setScr(s);
    local border = 16;
    sys.o.setXYXY(border, 32 + border, 320 - border, 32 + border + 32*4);
    
    draw_flag = 1;
  }
}


function process_args {
  print("mngr: processing: " + arg0);
  if (typeof(arg0) == TYPE_STR) {
    if (arg0 == "DISABLE") {
      sys.com.uartRdClb(&uartCB, 0);
      sys.hw.free(INT_EXP_PORT);
      sys.hw.free(EXT_EXP_PORT);
      sys.hw.free(SERIAL_PORT);
      inCall = 1;
      sys.os.suspend();
    }
    
    if (arg0 == "ENABLE") {
      sys.hw.claim(INT_EXP_PORT);
      sys.hw.claim(EXT_EXP_PORT);
      sys.hw.claim(SERIAL_PORT);
      sys.com.uartRdClb(&uartCB, 2);
      inCall = 0;
      sys.os.suspend();
    }
    
    if (arg0 == "RSMS") {
      sms_read = 0;
    }
    
    if (arg0 == "SMS") {
      if (pinOk == 1 and gsm_signal != 0) {
        sms_read = sys.time.get(); # postpone sms reading
        print("Phone manager: send sms");
        sys.gui.setStr(tSMS, "Sending sms...");
        sms_send(arg1, arg2);
      } else {
        exit_flag = 2;
      }
    }
    
    if (arg0 == "CALL") {
      print("Phone manager: CALL");
      CALL_FLG = 1;
      number = arg1;
    }
    
    if (arg0 == "STATUS") {
      print("Phone manager: STATUS");
      STATUS_FLG = 1;
    }
    
    if (arg0 == "PIN") {
      print("Phone manager: PIN");
      PIN_FLG = 1;
      pin_num = arg1;
    }
  }
}


function uartCB {
  print("mngr: uart callback wakeup!");
  sys.com.uartRdClb("", 0);
  sys.time.clearTimer();
  sys.os.arise();
  
  if(sys.hw.getLcdState() == 0) {
    sys.hw.wakeLcd();
    sms_read = sys.time.get() - (sms_delay_s - 10);
    lcd_off_fl = 1;
  }
  
  if(OVERLAY) {
    init_gui();
  }
  
  exit_flag = 0;
  sms_exit_fl = 1;
  
  # quicky update unsolicited messages...
  at_update();
  
  # don't update signal
  gsm_signal_l = sys.time.get();
}


function callRet {
  print("Call return, claiming resources");
  sys.hw.claim(INT_EXP_PORT);
  sys.hw.claim(EXT_EXP_PORT);
  sys.hw.claim(SERIAL_PORT);
  #sys.com.uartRdClb(&uartCB, 1); # 
  inCall = 0;
  exit_flag = 1;
  
  if(OVERLAY) {
    init_gui();
  }
  
  if (arg0 + "" == "MISSED") {
    sys.os.subProcess("phone/dialer.svs", "", "MISSED", "", 0);
  }
}


function suspend {
  print("mngr suspend called incall: " + inCall);
  if (inCall == 0) {
    sys.hw.claim(INT_EXP_PORT);
    sys.hw.claim(EXT_EXP_PORT);
    sys.hw.claim(SERIAL_PORT);
    # clean up uart stuff
    if(not sys.os.inSim()) {
      sys.com.uartGetRd();
      sys.com.uartGetStr();
      sys.com.uartRcvIT();
    }
    sys.com.uartRdClb(&uartCB, 1);
    at_set_dtr(1); # sleep enabled
    
    sys.time.setTimer(60000, &timerWkup);
  } else {
    sys.com.uartRdClb(&uartCB, 0);
    at_set_dtr(0); # sleep disabled
    sys.hw.free(INT_EXP_PORT);
    sys.hw.free(EXT_EXP_PORT);
    sys.hw.free(SERIAL_PORT);
    sys.time.clearTimer();
  }
}


function timerWkup {
  sys.os.arise();
  if(DEBUG) print("mngr: timer Wkup!");
  wakeup();
  exit_flag = 1;
  sms_exit_fl = 1;
}


function wakeup {
  sys.com.uartRdClb(&uartCB, 0);
  sys.time.clearTimer();
  at_set_dtr(0); # sleep disabled
  sys.gui.setStr(tSMS, "...");
  print("mngr: Wkup!");
  process_args(arg0, arg1, arg2);
  
  if(OVERLAY) {
    init_gui();
    gui_wkup = 1;
    print("wkup gui init");
    sys.os.gui.setMainScr(0);
    inOpt = 0;
  }
  
  sms_exit_fl = 0;
}


function get_signal {
  t_csq = at_command("AT+CSQ");
}


function gsm_ready {
  return (gsm_signal > 0 and pinOk and at_free()); 
}


function update {

  if ((gui_wkup == 1 and sys.o.getId() != selfOvr) and inOpt == 0) {
    init_gui();
    gui_wkup = 0;
    sys.os.gui.setMainScr(0);
    return;
  }
  
  if(draw_flag and inOpt == 0) {
    draw_signal();
    draw_flag = 0;
  }
  
  if (sys.os.getRedraw()) {
    draw_flag = 1;
  }

  if (sys.o.getId() != selfOvr and inOpt == 0) {
    # suspend and return if not valid
    sys.os.suspend();
    return;
  }
  
  # Handling unsolicited messages
  if (resolve_ring()) {
    return;
  }
  
  # Handling GUI stuff 
  if(sys.gui.getEventC(bOptions) == EV_RELEASED) {
    inOpt = 1;
    sys.o.destroy();
    sys.os.setRedraw();
    sys.os.gui.setMainScr(opt_scr);
  }
  
  if(sys.gui.getEventC(bBack) == EV_RELEASED) {
    inOpt = 0;
    sys.os.setRedraw();
    sys.os.gui.setMainScr(0);
    exit_flag = 1;
    return;
  }
  
  if(sys.gui.getEventC(optAirplane) == EV_RELEASED and at_enabled == 0) {
    sys.gui.setGrayout(optAirplane, 1);
    if(sys.gui.getValue(optAirplane) == 1) {
      t_cfun = at_command("AT+CFUN=4", 50);
      Airplane = 1;
      set_icon_ex("phone/sic/plane.sic");
      gsm_signal = 0;
      set_status("Airplane");
    } else {
      t_cfun = at_command("AT+CFUN=1", 50);   
      Airplane = 0;
    }
  }
  
  if(sys.gui.getEventC(bSMSRcv) == EV_RELEASED) {
    sms_read = 0;
    exit_flag = 0;
    sms_rcv_fl = 0;
  }
  
  if(sys.gui.getEventC(bDebug) == EV_RELEASED) {
    DEBUG = sys.gui.getValue(bDebug);
    print("DEBUG: " + DEBUG);
  }

  # Reading SMS, every 5 minutes
  if (sms_read + sms_delay_s < sys.time.get()
      and gsm_ready()
      and Airplane == 0
      and at_free()
  ) {
    sys.gui.setStr(tSMS, "Recieving SMS messages...");
    print("Mngr: Recieving SMS messages... smsRD+"+sms_delay_s+"=" + sms_read+sms_delay_s + " time:" + sys.time.get());
    if(sys.hw.getLcdState() == 0) {
      sys.hw.wakeLcd();
      lcd_off_fl = 1;
    }
    sys.gui.setStr(tStat, "Status: SMSRCV");
    sms_retrive();
    print("time: " + sys.time.get());
    sms_read = sys.time.get();
    print("sms_read: " + sms_read);
    exit_flag = 0;
    sms_rcv_fl = 1;
  }

  # STATUS_FLG
  if (STATUS_FLG == 1) { # SATUS: INIT, READY, ERR, SIMPIN
    if (mngr_in_init == 0) {
      STATUS_FLG = 0;
      sys.os.exit(mngr_status, 0, 0);
      return;
    } else {
      STATUS_FLG = 2;
    }
  }
  
  # PIN_FLG - try to unlock PIN
  if (PIN_FLG and at_free()) {
    PIN_FLG = 0;
    t_spin = at_command("AT+CPIN=" + pin_num, 150);
  }
  
  # CALL_FLAG - manager was woken to call someone
  if (CALL_FLG and gsm_ready()) {
    CALL_FLG = 0;
    print("Mngr: calling " + number);
    inCall = 1;
    sys.os.subProcess("phone/caller.svs", &callRet, "CALL", number, 0);
  }
  
  local res;
  
  # CFUN result
  res = at_result(t_cfun);
  if(res == RES_OK) {
    print("mngr: CFUN: OK");
    sys.gui.setGrayout(optAirplane, 0);
    
    if(Airplane == 0) {
      print("mngr: Re-enable after Airplane mode...");
      run_inits();
      t_at = at_command("AT", 1);
    }
  }
  
  if (res == RES_ERR) {
    print("phone: CFUN: ERR");
    sys.gui.setGrayout(optAirplane, 0);
    Airplane = not Airplane;
    sys.gui.setValue(optAirplane, Airplane);
  }
  
  # AT result
  res = at_result(t_at);
  if(res == RES_OK) {
    print("phone mngr: AT: OK");
    
    run_inits();
    at_wait(100);
    t_cpin = at_command("AT+CPIN?", 2);
  }
  
  if (res == RES_ERR) {
    print("phone: AT: ERR");
    
    if (at_err > 10) {
      set_status("ERR");
      sys.os.error("Modem not responding!");
      return;
    }
    
    t_at = at_command("AT");
    at_err++;
  }
  
  # simpin
  res = at_result(t_spin);
  if(res == RES_OK) {
    t_cpin = at_command("AT+CPIN?", 2);
  }
  
  # CPIN handling
  res = at_result(t_cpin);
  if(res == RES_OK) {
    if(instr(at_result, "+CPIN: READY")) {
      print("pin OK");
      set_status("READY");
      pinOk = 1;
      t_cspn = at_command("AT+CSPN?");
    } else {
      set_status("SIMPIN");
      mngr_in_init = 0;
      if (STATUS_FLG == 2) STATUS_FLG = 1;
      #sys.os.exit("ERR", 0, 0);
    }
  }
  
  if(res == 2) {
    print("CPIN fail");
    at_wait(400);
    t_cpin = at_command("AT+CPIN?", 2);
  }
  
  # CSPN Result
  res = at_result(t_cspn);
  
  if(res == RES_OK) {
    sys.gui.setStr(tOperator, parse_cspn(at_result));
    get_signal();
  }
  
  if(res == 2) {
    print("CSPN fail");
    at_wait(400);
    t_cpin = at_command("AT+CSPN?", 2);
  }
  
  # CSQ result
  res = at_result(t_csq);
  if(res == RES_OK) {
    print("phone mngr: CSQ: OK");
    gsm_signal = parse_csq(at_result);
    gsm_signal_l = sys.time.get();
    print("CSQ: " + gsm_signal);
    
    set_icon(gsm_signal);
    draw_signal();
    
    if (gsm_signal == 0) {
      set_status("NO_SIGNAL");
    } else {
      set_status("READY");
    }
    
    mngr_in_init = 0;
    if (STATUS_FLG == 2) STATUS_FLG = 1;
  }
  
  if (res == RES_ERR) {
    print("phone: CSQ: ERR");
    t_csq = at_command("AT+CSQ");
  }
  
  if(gsm_signal_l + 30 < sys.time.get()
     and at_free()
     and pinOk
     and Airplane == 0
     and sms_rcv_fl == 0
  ) {
    get_signal();
  }
  
  # handling dummy
  at_result(t_dummy);
  
  sms_upd();
  
  at_update();
  
  if (exit_flag and at_enabled == 0 and sms_rcv_fl == 0) {
    if (exit_flag == 1) {
      sys.os.exit("OK", 0, 0);
    } else { 
      sys.os.exit("ERR", 0, 0);
    }
    if (lcd_off_fl) {
      sys.hw.setLcdState(0);
      lcd_off_fl = 0;
    }
    exit_flag = 0;
    return;
  }
}


function draw_signal {
  if(inOpt == 1) return;

  sys.ds.setArea(200, 64 + 16, 220 + 70, 64+64 + 16);
  sys.ds.clearArea(sys.gui.getColor(COL_BACKGROUND));
  
  if (gsm_signal > 0) {
    sys.ds.fillRect(1, 48, 16, 64, sys.gui.getColor(COL_ACTIVE));
  } else {
    sys.ds.fillRect(1, 48, 16, 64, sys.gui.getColor(COL_FILL));
  }
  sys.ds.drawRect(1, 48, 16, 64, sys.gui.getColor(COL_BORDER));
  
  if (gsm_signal > 8) {
    sys.ds.fillRect(1 + 20, 32, 16 + 20, 64, sys.gui.getColor(COL_ACTIVE));
  } else {
    sys.ds.fillRect(1 + 20, 32, 16 + 20, 64, sys.gui.getColor(COL_FILL));
  }
  sys.ds.drawRect(1 + 20, 32, 16 + 20, 64, sys.gui.getColor(COL_BORDER));
  
  if (gsm_signal > 16) {
    sys.ds.fillRect(1 + 40, 16, 16 + 40, 64, sys.gui.getColor(COL_ACTIVE));
  } else {
    sys.ds.fillRect(1 + 40, 16, 16 + 40, 64, sys.gui.getColor(COL_FILL));
  }
  sys.ds.drawRect(1 + 40, 16, 16 + 40, 64, sys.gui.getColor(COL_BORDER));
  
  if (gsm_signal > 24) {
    sys.ds.fillRect(1 + 60, 1, 16 + 60, 64, sys.gui.getColor(COL_ACTIVE));
  } else {
    sys.ds.fillRect(1 + 60, 1, 16 + 60, 64, sys.gui.getColor(COL_FILL));
  }
  sys.ds.drawRect(1 + 60, 1, 16 + 60, 64, sys.gui.getColor(COL_BORDER));
}


function resolve_ring {
  
  if(sys.os.inSim()) {
    return 0;
  }
  
  if(inCall == 1) {
    print("mngr: ERR? inCall got hanging!");
    inCall = 0;
  }
  
  if(at_ring) {
    print("mngr: got AT RING!");
    at_ring = 0;
    inCall = 1;
    number = "";
    sys.os.subProcess("phone/caller.svs", &callRet, "INCOMMING", "", 0);
    return 1;
  }
  
  if(at_new_sms) {
    print("mngr: got SMS CMTI!");
    at_new_sms = 0;
    sms_read = 0; 
    return 0;
  }
  
  return 0;
}


function bp2 {
  sys.snd.beepC(440, 250, &bp3);
}


function bp3 {
  sys.snd.beepC(880, 250, "");
  #sys.os.exit("OK", 0, 0);
  sys.hw.wakeLcd();
  sys.os.subProcess("phone/messages.svs", "", "RCV_NEW", "", 0);
  sms_rcv_fl = 0;
}


function sms_fin_cb {
  print("sms_fin_cb: called");
  if (sms_exit_fl) {
    exit_flag = 1;
    sms_exit_fl = 0;
  }

  
  if(new_sms_flg) {
    new_sms_flg = 0;
    sys.snd.beepC(880, 250, &bp2);
  } else {
    sms_rcv_fl = 0;
  }
  
  sys.gui.setStr(tStat, "Status: READY");
  sys.gui.setStr(tSMS, "Got " + new_sms_flg + " new SMS messages.");
}


function sms_send_cb {
  if (arg0) {
    sys.gui.setStr(tSMS, "SMS successfully sent!");
    exit_flag = 1;
  } else {
    sys.gui.setStr(tSMS, "Error occured while sending SMS.");
    exit_flag = 2;
  }
}


function parse_csq {
  if(instr(arg0, "+CSQ:")) {
    return num(substr(arg0, instr(arg0, "+CSQ:") + 5, instr(arg0, ",") - 1));
  } else {
    return 0;
  }
}


function parse_cspn {
  if(instr(arg0, "+CSPN:")) {
    print("sub: " + substr(arg0, instr(arg0, "+CSPN:") + 3, instr(arg0, "\"") - 1));
    return substr(arg0, instr(arg0, "+CSPN:") + 8, instr(arg0, "\",") - 1);
  } else {
    return "?";
  }
}
