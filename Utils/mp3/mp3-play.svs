#*
  App for controlling DFPlayer mini module
  it needs song database file that could be generated by following shellscript
  Run it in the mp3 folder of your DFPlayer card, then put the resulting mp3-list.dat
  in DATA folder of your SDA

find . -maxdepth 1 -name '*.mp3' | awk 'BEGIN{ a=0 }{ printf "mp3info -p \"%d=%%a - %%t (%%f) \\n%d_len=%%S\\n\" \"%s\" \n", a, a, substr($0,3), a++ }' \
| bash > ~/mp3-list.dat

*#
function ds_cmd { # cmd, param1, param2
  sys.com.qAdd(0x7E);
  sys.com.qAdd(0xFF);
  sys.com.qAdd(0x06);
  sys.com.qAdd(arg0);
  sys.com.qAdd(0x00);
  sys.com.qAdd(arg1);
  sys.com.qAdd(arg2);

  local sum;

  sum = 65536 - (0xFF + 0x06 + arg0 + arg1 + arg2);

  sys.com.qAdd(sum / 256);
  sys.com.qAdd(sum % 0xFF00);

  sys.com.qAdd(0xEF);
  sys.com.qAdd(0x00);
  sys.com.uartTrsQ();
}

function ds_play {
  ds_cmd(0x0D, 0, 0);
}

function ds_play_s #* (song no)*# {
  ds_cmd(0x03, arg0/256, arg0%256);
}

function ds_pause {
  ds_cmd(0x0E, 0, 0);
}

function ds_prev {
  ds_cmd(0x02, 0, 0);
}

function ds_next {
  ds_cmd(0x01, 0, 0);
}

function ds_vol_incr {
  ds_cmd(0x04, 0, 0);
}

function ds_vol_decr {
  ds_cmd(0x05, 0, 0);
}

function ds_rnd {
  ds_cmd(0x18, 0, 0);
}

function ds_vol {
  ds_cmd(0x06, 0, arg0);
}

function scr_adjust {
  if (landscape == 0) {
    sys.gui.setXYXY(t_name, 1, 1, 7, 1);
    sys.gui.setXYXY(btn, 4, 11, 2, 2);
    sys.gui.setXYXY(btn_n, 7, 11, 2, 2);
    sys.gui.setXYXY(btn_p, 1, 11, 2, 2);
    sys.gui.setXYXY(btn_rnd,2,8,4,1);
    sys.gui.setXYXY(btn_r, 1,8,1,1);
    sys.gui.setXYXY(t_curr, 1,3,4,1);
    sys.gui.setXYXY(fnameText, 1,4,7,2);
    sys.gui.setXYXY(t_vol, 1,9,3,1);
    sys.gui.setXYXY(vol_sld, 4,9,5,1);
    sys.gui.setXYXY(timeBar, 1, 7, 8, 1);
    sys.gui.setXYXY(current, 5,3,4,1);
    
    sys.gui.setXYXY(big_list_in, 1, 2, 7, 9);
    sys.gui.setXYXY(bl_current,1, 1, 4, 1);
    sys.gui.setXYXY(bl_back,1, 12, 2, 1);
    sys.gui.setXYXY(bl_slider, 8, 2, 1, 9);
    sys.gui.setXYXY(bl_up, 9, 2, 1, 3);
    sys.gui.setXYXY(bl_dn, 9, 5, 1, 3);
    sys.gui.setXYXY(bl_search_b,6, 12, 3, 1);
    sys.gui.setGrayout(bl_search_b, 0);
  } else {
    sys.gui.setXYXY(t_name, 1, 1, 7, 1);
    sys.gui.setXYXY(btn, 3, 6, 2, 2);
    sys.gui.setXYXY(btn_n, 5, 6, 2, 2);
    sys.gui.setXYXY(btn_p, 1, 6, 2, 2);
    sys.gui.setXYXY(btn_rnd, 10, 7,4,1);
    sys.gui.setXYXY(btn_r, 9, 7, 1, 1);
    sys.gui.setXYXY(t_curr, 1, 2, 4, 1);
    sys.gui.setXYXY(fnameText, 1, 3, 8, 1);
    sys.gui.setXYXY(t_vol, 9, 3, 3, 1);
    sys.gui.setXYXY(vol_sld, 9, 4, 5, 1);
    sys.gui.setXYXY(timeBar, 1, 4, 6, 1);
    sys.gui.setXYXY(current, 9, 6, 4, 1);
    
    sys.gui.setXYXY(big_list_in, 1, 2, 12, 6);
    sys.gui.setXYXY(bl_current,1, 1, 4, 1);
    sys.gui.setXYXY(bl_back,1, 8, 2, 1);
    sys.gui.setXYXY(bl_slider, 13, 2, 1, 6);
    sys.gui.setXYXY(bl_up, 14, 2, 1, 3);
    sys.gui.setXYXY(bl_dn, 14, 5, 1, 3);
    sys.gui.setXYXY(bl_search_b, 6, 8, 3, 1);
    sys.gui.setGrayout(bl_search_b, 1);
  }
  reload_list();
}

function init {
  sys.os.checkVer(1000);
  sys.os.setSingular();
  scr = sys.gui.addScreen();
  sys.gui.setRelInit(1);
  t_name = sys.gui.addText(1,1,7,1, "SDA Player", scr);
  btn = sys.gui.addButton(4,11,2,2, "Play", scr);
  btn_n = sys.gui.addButton(7,11,2,2, ">>", scr);
  btn_p = sys.gui.addButton(1,11,2,2, "<<", scr);
  btn_rnd = sys.gui.addCheckBox(2,8,4,1, "Random", scr);
  btn_r = sys.gui.addButton(1,8,1,1, "R", scr);
  t_curr = sys.gui.addText(1,3,4,1, "Current:", scr);
  fnameText = sys.gui.addText(1,4,7,2, "None", scr);
  t_vol = sys.gui.addText(1,9,3,1, "Vol:", scr);
  vol_sld = sys.gui.addSliderH(4,9,5,1, 30, 15, scr);
  timeBar = sys.gui.addBar(1, 7, 8, 1, 0, 10, scr);
  sys.os.gui.setMainScr(scr);
  sys.hw.btn.stdbyEn(1);
  # DFPlayer on the internal expansion by default
  # Pin16 is used to enable power for the player
  sys.hw.iPinDef(15, PIN_ALT, 0);
  sys.hw.iPinDef(16, PIN_OUT, 0);
  sys.hw.iPinSet(16, 1);

  # load settings
  sys.fs.conf.open("mp3-play.cfg");
  
  if (sys.fs.conf.exists("volume")) {
    sys.gui.setValue(vol_sld, num(sys.fs.conf.read("volume")));
    setInitVolFlag = 40;
  }
  if (sys.fs.conf.exists("random")) {
    sys.gui.setValue(btn_rnd, num(sys.fs.conf.read("random")));
  }

  sys.fs.conf.close();
  
  # load list of songs
  sys.fs.conf.open("mp3-list.dat");
  array btnList[30];
  array btnListSng[30];
  array prevSongs[15];
  numOfSongs = countSongs();

  current = sys.gui.addButton(5,3,4,1, "All songs", scr);

  prevSong = 0;
  currentSong = 0;

  MoveList = 1;
  
  play = 0;
  landscape = 0;
  
  add_big_list();
  upd_sleep();
}

function add_big_list {
  big_list = sys.gui.addScreen();
  big_list_in = sys.gui.addScreen();
  
  sys.gui.setScreen(big_list_in, big_list);
  sys.gui.setXYXY(big_list_in, 1, 2, 7, 9);
  
  #scrollbar, searchfield,
  
  bl_current = sys.gui.addButton(1, 1, 4, 1, "To current", big_list);
  
  bl_back = sys.gui.addButton(1, 12, 2, 1, "<", big_list);
  bl_slider = sys.gui.addSliderV(8, 2, 1, 9, (numOfSongs - 9)*32 + 15, 0, big_list);
  
  bl_up = sys.gui.addButton(9, 2, 1, 3, "/\\", big_list);
  bl_dn = sys.gui.addButton(9, 5, 1, 3, "\n\n\n\\/", big_list);
  
  bl_search_b = sys.gui.addButton(6, 12, 3, 1, "search", big_list);
  
  bl_search = sys.gui.addText(1, 20, 7, 1, "", big_list);
  sys.gui.setTexEd(bl_search, 1);
  
  bl_pre_active = 0;
  bl_search_str = "";
  
  listBegin = 0;
  
  list_filter = "";
  list_filter_pr = "";
  list_search = 0;
  list_filter_t = 0;
  
  reload_list();
}

function countSongs {
  n = 0;
  while(sys.fs.conf.exists(n + "")) {
    n++;
  }

  return n;
}

function upd_sleep {
  sleep_timer = sys.time.get();
}


function play_no {
  play = 1;
  sys.gui.setStr(btn, "Stop");
  ds_play_s(arg0);
  update_song(arg0);
  print("play: " + arg0);
  sys.gui.setStr(fnameText, "" + sys.fs.conf.read(arg0-1+""));
  waitTime = num(sys.fs.conf.read(arg0-1+"_len")) + sys.time.get();
  startTime = sys.time.get();
  sys.gui.setParam(timeBar, waitTime -  sys.time.get());
  
  sys.time.setTimer((waitTime -  sys.time.get()) * 1000, &play_next);

  if (prevSongs[0] != currentSong and currentSong != 0) {
    local x;
    for (x = 14; x > 0; x--;) {
      prevSongs[x] = prevSongs[x - 1];
    }

    prevSongs[0] = currentSong;
  }
  currentSong = arg0;
}


function play_next {
  if ((sleep_timer + 60*60) < sys.time.get()) {
    sys.gui.setStr(btn, "Play");
    ds_pause();
    play = 0;
    sys.time.clearTimer();
    return;
  }

  if (sys.gui.getValue(btn_rnd)) {
    local rndSong;
    while (rndSong == currentSong) {
      rndSong = sys.os.rnd() % numOfSongs;
    }
    play_no(rndSong);
  } else {
    play_no(currentSong + 1);
  }
}


function update {
  # wait few cycles before setting the initial volume to let the DFPlayer boot
  if (setInitVolFlag != 0) {
    setInitVolFlag--;
    if (setInitVolFlag == 0) {
      ds_vol(sys.gui.getValue(vol_sld));
    }
  }

  upd_list_scr();

  if (play == 1) {
    sys.gui.setValue(timeBar, sys.gui.getParam(timeBar) - (waitTime - sys.time.get()));
  }

  if (sys.gui.getEventC(btn) == EV_RELEASED) {
    upd_sleep();
    if (play == 0) {
      sys.gui.setStr(btn, "Stop");
      ds_vol(sys.gui.getValue(vol_sld));
      if (currentSong != 0) {
        play_no(currentSong);
      } else {
        play_next();
      }
    } else {
      sys.gui.setStr(btn, "Play");
      ds_pause();
      play = 0;
      sys.time.clearTimer();
    }
  }

  if (sys.gui.getEventC(btn_n) == EV_RELEASED) {
    upd_sleep();
    ds_vol(sys.gui.getValue(vol_sld));
    play_next();
  }
  
  if (sys.gui.getEventC(current) == EV_RELEASED) {
    upd_sleep();
    sys.os.gui.setMainScr(big_list);
  }

  if (sys.hw.btn.getEvent(BTN_RIGHT) == EV_PRESSED) {
    upd_sleep();
    sys.os.wake();
    sys.gui.setEvent(btn_n, EV_RELEASED);
  }

  if (sys.hw.btn.getEvent(BTN_LEFT) == EV_PRESSED) {
    upd_sleep();
    sys.os.wake();
    sys.gui.setEvent(btn_p, EV_RELEASED);
  }
  
  if (sys.gui.getEventC(btn_r) == EV_RELEASED) {
    sys.os.gui.setLandscape(1 - sys.os.gui.getLandscape());
    landscape = sys.os.gui.getLandscape();
    scr_adjust();
  }

  if (sys.gui.getEventC(btn_p) == EV_RELEASED) {
    upd_sleep();
    ds_vol(sys.gui.getValue(vol_sld));
    if (sys.time.get() - startTime > 10) {
      if (currentSong != 0) {
        play_no(currentSong);
      }
    } else {
      if (prevSongs[0] != 0) {
        play_no(prevSongs[0]);
        local x;
        for (x = 0; x < 14; x++;) {
          prevSongs[x] = prevSongs[x + 1];
        }
        prevSongs[14] = 0;
      }
    }
  }

  sys.hw.btn.clrEvent(BTN_LEFT);
  sys.hw.btn.clrEvent(BTN_RIGHT);

  if (sys.gui.getEventC(vol_sld)) {
    ds_vol(sys.gui.getValue(vol_sld));
    upd_sleep();
  }

  if (sys.hw.btn.getEvent(BTN_UP) == EV_PRESSED) {
    upd_sleep();
    sys.os.wake();
    if (sys.gui.getValue(vol_sld) < 30) {
      sys.gui.setValue(vol_sld, sys.gui.getValue(vol_sld) + 1);
      sys.gui.setEvent(vol_sld, EV_RELEASED);
    }
  }

  if (sys.hw.btn.getEvent(BTN_DOWN) == EV_PRESSED) {
    upd_sleep();
    sys.os.wake();
    if (sys.gui.getValue(vol_sld) > 0) {
      sys.gui.setValue(vol_sld, sys.gui.getValue(vol_sld) - 1);
      sys.gui.setEvent(vol_sld, EV_RELEASED);
    }
  }
  sys.hw.btn.clrEvent(BTN_UP);
  sys.hw.btn.clrEvent(BTN_DOWN);
}


function upd_list_scr {
  if (sys.gui.getEventC(bl_back) == EV_RELEASED) {
    sys.os.gui.setMainScr(scr);
    upd_sleep();
  }
  
  if (sys.gui.getEventC(bl_current) == EV_RELEASED) {
    # reload to current on top
    sys.gui.setValue(bl_slider, (currentSong - 1)*32);
    upd_sleep();
  }

  if (sys.gui.getEventC(bl_search_b) == EV_RELEASED) {
    upd_sleep();
    sys.gui.setTexAct(bl_search);
    sys.gui.setXYXY(bl_search, 1, 8, 7, 1);
    sys.gui.setXYXY(big_list_in, 1, 2, 7, 6);
    sys.gui.setXYXY(bl_slider, 8, 2, 1, 6);
    sys.gui.setGrayout(bl_current, 1);
    sys.os.showKbd();
    
    list_search = 1;
    list_filter_t = 0;
    list_filter = "";
    list_filter_pr = "";
    
    listBegin_prev = listBegin;
    listBegin = 0;
    
    slider_p_pre = sys.gui.getParam(bl_slider);
    slider_val_pre = sys.gui.getValue(bl_slider);
    sys.gui.setValue(bl_slider, 0);
  }
  
  if (bl_pre_active == 1 and sys.gui.getTexAct(bl_search) == 0) {
    #hide stuff
    sys.gui.setXYXY(bl_search, 1, 20, 7, 1);
    sys.gui.setXYXY(big_list_in, 1, 2, 7, 9);
    sys.gui.setXYXY(bl_slider, 8, 2, 1, 9);
    sys.gui.setGrayout(bl_current, 0);
    
    sys.gui.setValue(bl_slider, slider_val_pre);
    sys.gui.setParam(bl_slider, slider_p_pre);
    listBegin = listBegin_prev;
    list_search = 0;
    reload_list();
  }
  
  bl_pre_active = sys.gui.getTexAct(bl_search);
  
  if (sys.gui.getEventC(bl_up) == EV_RELEASED) {
    if (sys.gui.getValue(bl_slider) > 5*32) {
      sys.gui.setValue(bl_slider, sys.gui.getValue(bl_slider) - 5*32);
    } else {
      sys.gui.setValue(bl_slider, 0);
    }
  }
  
  if (sys.gui.getEventC(bl_dn) == EV_RELEASED) {
    sys.gui.setValue(bl_slider, sys.gui.getValue(bl_slider) + 5*32);
  }
 
  sys.gui.setYscroll(big_list_in, sys.gui.getValue(bl_slider));

  if (list_search == 0) {
    if (sys.gui.getValue(bl_slider)/32 < listBegin) {
      if (sys.gui.getValue(bl_slider)/32 > 5) {
        listBegin = sys.gui.getValue(bl_slider)/32 - 5;
      } else {
        listBegin = 0;
      }
      #print("reload1: "+listBegin);
      reload_list();
    }
    
    if (sys.gui.getValue(bl_slider)/32 > listEnd - 9) {
      if (sys.gui.getValue(bl_slider)/32 > 5) {
        listBegin = sys.gui.getValue(bl_slider)/32 - 5;
      } else {
        listBegin = 0;
      }
      #print("reload2: "+listBegin);
      reload_list();
    }
  } else {
    list_filter = sys.os.gui.handleText(bl_search, list_filter);
    if (list_filter != list_filter_pr) {
      list_filter_t = sys.time.getAppUptime() + 700;
    }
    
    if (sys.time.getAppUptime() >= list_filter_t and list_filter_t != 0) {
      reload_list();
      sys.gui.setParam(bl_slider, listMax*32);
      sys.gui.setValue(bl_slider, 0);
      sys.gui.setModif(bl_slider);
      list_filter_t = 0;
    }
    
    list_filter_pr = list_filter;
  }
  
  update_list();
}


function update_list {
  local b;
  for(b = 0; b < listMax; b++;) {
    if (sys.gui.getEventC(btnList[b]) == EV_RELEASED) {
      upd_sleep();
      play_no(btnListSng[b]);
      reload_list();
    }
  }
}

function update_song #* new current *# {
  if (currentSong >= listBegin and currentSong <= listEnd) {
    sys.gui.setSelect(btnList[currentSong - listBegin - 1], 0);
  }
  if (arg0 >= listBegin and arg0 <= listEnd) {
    sys.gui.setSelect(btnList[arg0 - listBegin - 1], 1);
  }
}


function reload_list {
  local b;
  local n;
  local a;
  for(b = 0; b < len(btnList); b++;) {
    sys.gui.destroy(btnList[b]);
  }

  b = 0;
  a = 0;
  if (list_search == 0) {
    for(n = listBegin; n < (listBegin + len(btnList)); n++;) {
      local text;
      #if (sys.fs.conf.exists(n + "") == 0) {
      #  break;
      #}
      text = sys.fs.conf.read(n + "");
      if (text == "") {
        break;
      }
      
      btnList[b] = sys.gui.addButton(0, listBegin + b, 7 + 6*landscape, 1, text, big_list_in);
      btnListSng[b] = listBegin + b + 1;
      if (listBegin + b + 1 == currentSong) {
        sys.gui.setSelect(btnList[b], 1);
      }
     
      b++;
    }
  } else {
    for(n = 0; b < len(btnList); n++;) {
      local text;
      #if (sys.fs.conf.exists(n + "") == 0) {
      #  break;
      #}
      text = sys.fs.conf.read(n + "");
      if (text == "") {
        break;
      }
      
      if (instr(lower(text), lower(list_filter))) {
        btnList[b] = sys.gui.addButton(0, b, 7 + 6*landscape, 1, text, big_list_in);
        btnListSng[b] = n + 1;
        if (n + 1 == currentSong) {
          sys.gui.setSelect(btnList[b], 1);
        }
        b++;
      }
    }
  }

  listEnd = n;
  listMax = b;
}


function exit {
  sys.fs.conf.close();
  sys.fs.conf.open("mp3-play.cfg");
  sys.fs.conf.write("volume", "" + sys.gui.getValue(vol_sld) + " ");
  sys.fs.conf.write("random", "" + sys.gui.getValue(btn_rnd) + " ");
  sys.fs.conf.write("fixforbrokenConf", "" + sys.gui.getValue(vol_sld) + " ");
  sys.fs.conf.close();
  ds_pause();
  sys.hw.iPinDef(15, PIN_IN, 0);
  sys.hw.iPinSet(16, 0);
}
