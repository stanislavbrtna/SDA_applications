###############################################################################
## GPS App for SDA 2.0
## 
## This app needs an GPS module connected on the external serial port
## 
###############################################################################

import "lib/inc/ddm.svs"
import "lib/inc/uarts.svs"


 # misc
function get_folder {
  for(arg2 = len(arg0); arg2 > 0; arg2--;) {
    if (getcp(arg0, arg2) == "/") {
      return substr(arg0, 0, arg2);
    }
  }
}


function hw_init {
  uart_init();
  
  if(uart_init_ext()) {
    sys.gui.setStr(txt, "Serial port is claimed\nby some other app.");
    return;
  }
  
  if(sys.os.inSim() == 1) return; 
  
  # init rcv
  sys.com.uartRcvIT();
  
  # clear rcv flags
  sys.com.uartGetRd();
  sys.com.uartGetStr();
}


 # main init 
function init {
  sys.os.checkVer(1310);
  scr = sys.gui.addScreen();
  sys.hw.lockSleep(1);
  sys.os.setSingular();
  
  sys.gui.setRelInit(1);
  bMapSel  = sys.gui.addButton(0, 0, 4, 1, "Select map", scr);
  bAutoFit = sys.gui.addButton(6, 0, 3, 1, "Auto fit", scr);
  
  vBar = sys.gui.addSliderV(9, 1, 1, 5, 1000, 500, scr);
  hBar = sys.gui.addSliderH(0, 8, 9, 1, 1000, 500, scr);
  
  bar = sys.gui.addBar(9, 13, 1, 1, 5, 2, scr);
  
  sys.gui.setSliderSize(vBar, 32);
  
  bP = sys.gui.addButton(9, 6, 1, 1, "+", scr);
  bM = sys.gui.addButton(9, 7, 1, 1, "-", scr);
  bS = sys.gui.addButton(9, 8, 1, 1, "[]", scr);
  
  sys.gui.setTexAlign(bP, ALIGN_CENTER);
  sys.gui.setTexAlign(bM, ALIGN_CENTER);
  sys.gui.setTexAlign(bS, ALIGN_CENTER);
  
  bInfo = sys.gui.addButton(9, 9, 1, 1, "i", scr);
  bTr = sys.gui.addButton(9, 10, 1, 1, "T", scr);
  
  sys.gui.setTexAlign(bInfo, ALIGN_CENTER);
  sys.gui.setTexAlign(bTr, ALIGN_CENTER);
  
  sys.gui.setSelect(bInfo, 1);
  
  sys.gui.addScreen(0, 1, 9, 7, scr);
  
  sys.os.gui.setMainScr(scr);
  
  # Info screen
  sInfo = sys.gui.addScreen();
  txt = sys.gui.addText(0, 0, 9, 5, "Initializing...", sInfo);
  
  # Track screen
  sTrack = sys.gui.addScreen();
  sys.gui.addText(0, 0, 9, 1, "Track info:", sTrack);
  tTrInfo = sys.gui.addText(0, 1, 9, 1, "...", sTrack);
  tTrInfo2 = sys.gui.addText(0, 2, 9, 1, "", sTrack);
  tTrInfo3 = sys.gui.addText(0, 3, 9, 1, "", sTrack);
  tBNew = sys.gui.addButton(0, 4, 4, 1, "New track", sTrack);
  tBLoad = sys.gui.addButton(5, 4, 4, 1, "Load track", sTrack);
  
  frame = sys.gui.addFrame(0, 9, 9, 5, sInfo, scr);
  
  sys.fs.chDir();
  sys.fs.chDir("appdata");
  
  if(not sys.fs.exists("gps")) {
    sys.fs.mkDir("gps");
  }
  
  # move back to app folder
  sys.fs.chDir(1);
  sys.fs.chDir(get_folder(sys.os.getAppPath()));

  # Set up variables

  #initial redraw
  redraw = 3;
  
  # GPS fix
  fix = "";
  upd_fix = 0;
  pos_acq = 0;
  
  gps_attempt = 0;
  
  timeStamp = "";
  
  # Menus
  menu1 = 0;
  
  # Display
  scaler = 0.0;
  mark_color = sys.ds.mixColor(255, 0, 0);
  
  # tracking
  array trk_lat[120];
  array trk_lon[120];
  
  track_enabled = 0;
  track_display = 0;
  track_dist = 0.0;
  
  maps_setup();
}


 ##############################################################################
 ## Maps ######################################################################
 ##############################################################################
function maps_setup {
  map_max = 4;
  array map_file[map_max];
  array map_name[map_max];
  
  array map_x[map_max];
  array map_y[map_max];
  array map_xscale[map_max];
  array map_yscale[map_max];
  array map_tiled[map_max];
  
  # Map 0
  map_name[0] = "Europe";
  map_file[0] = "maps/map_eu.p16";
  map_x[0] = -26.9405;
  map_y[0] = -73.2511;
  #70°12'47.328"N, 24°19'24.779"W
  map_xscale[0] = 7.751; #px/deg
  map_yscale[0] = 15.850; #px/deg
  map_tiled[0] = 0;
  
  # Map cz
  map_name[1] = "Czechia";
  map_file[1] = "maps/map_cz";
  map_x[1] = 11.950;
  map_y[1] = -51.07091467;
  map_xscale[1] = 165.0; #px/deg
  map_yscale[1] = 265.0; #px/deg
  map_tiled[1] = 1;
  
  #* 
  #cz old
  map_x[1] = 12.1181008;
  map_y[1] = -51.07091467;
  map_xscale[1] = 110.0; #px/deg
  map_yscale[1] = 161.0; #px/deg
  map cb
  map_name[2] = "Budějce";
  map_file[2] = "maps/map_cb.p16";
  map_x[2] = 14.3905;
  map_y[2] = -49.0327;
  map_xscale[2] = 11500.0; #px/deg
  map_yscale[2] = 17200.0; #px/deg
  map_tiled[2] = 0;
  *#
  
  # map cb tiled
  map_name[2] = "Budějce";
  map_file[2] = "maps/map_cb";
  map_x[2] = 14.3921;
  map_y[2] = -49.0318;
  map_xscale[2] = 10980.0; #px/deg
  map_yscale[2] = 16340.0; #px/deg
  map_tiled[2] = 1;
  
  set_map(2);
  
  hw_init();
}


function set_map {
  current_map = arg0;

  map_dscale = 1;
  
  if (map_tiled[arg0] == 0) {
    map_w = sys.ds.getImageW(map_file[current_map]);
    map_h = sys.ds.getImageH(map_file[current_map]);
  } else {
    sys.fs.conf.open(map_file[current_map] + "/info.cfg");
    map_w = num(sys.fs.conf.read("map_w", "0"));
    map_h = num(sys.fs.conf.read("map_h", "0"));
    sys.fs.conf.close();
  }
  
  view_w = 285;
  view_h = 222;
  
  sys.gui.setValue(vBar, 500);
  sys.gui.setValue(hBar, 500);
}

##############################################################################
## Geo math functions ########################################################
##############################################################################

function getDeg {
  local i;
  local s;
  s = arg0;
  for (i = 0; i < len (s) and getcp(s, i) != "."; i++;){}
  return substr(s, 1, i - 3);
}


function getMin {
  local i;
  local s;
  s = arg0;
  for (i = 0; i < len (s) and getcp(s, i) != "."; i++;){}
  return substr(s, i - 2, i + 5);
}


function get_xpos { # lon, lonS
  local r;
  r = (float(getDeg(arg0)) + float(getMin(arg0))/60.0);
    
    if (arg1 == "W") {
      r *= (-1.0);
    }
  return r;
}


function get_ypos { # lat, latS
  local r;
  r = (float(getDeg(arg0)) + float(getMin(arg0))/60.0);
    
  if (arg1 == "N") {
    r *= (-1.0);
  }
  return r;
}


## formula is form https://www.movable-type.co.uk/scripts/latlong.html
function get_distance { # lat1(a0) lon1(a1) lat2(a2) lon2(a3)
  R       = float(6371 * 10*10*10); # metres
  fi1     = arg0 * pi()/180.0; # φ, λ in radians
  fi2     = arg2 * pi()/180.0;
  dfi     = (arg2-arg0) * pi()/180.0;
  dlambda = (arg3-arg1) * pi()/180.0;

  a = sin(dfi/2.0) * sin(dfi/2.0) +
          cos(fi1) * cos(fi2) *
          sin(dlambda/2.0) * sin(dlambda/2.0);
  c = 2.0 * atan2(sqrt(a), sqrt(1.0 - a));

  d = R * c; # in metres
  
  return d;
}

##############################################################################
## Draw routines #############################################################
##############################################################################

function set_sizes {
  if(map_dscale > 0) {
    parH = map_w*map_dscale - view_w;
    parV = map_h*map_dscale - view_h;
    scaler = float(map_dscale);
  } else {
    if(map_dscale == 0) {
      parH = map_w/2 - view_w;
      parV = map_h/2 - view_h;
      scaler = 0.5;
    }
    if(map_dscale == -1) {
      parH = map_w/4 - view_w;
      parV = map_h/4 - view_h;
      scaler = 0.25;
    }
    if(map_dscale == -2) {
      parH = map_w/8 - view_w;
      parV = map_h/8 - view_h;
      scaler = 0.125;
    }
    if(map_dscale == -3) {
      parH = map_w/16 - view_w;
      parV = map_h/16 - view_h;
      scaler = 0.0625;
    }
  }

  xpos = - num(float(sys.gui.getValue(hBar))/1000.0 * float(parH));
  ypos = - num(float(sys.gui.getValue(vBar))/1000.0 * float(parV));

}


function draw_cross {
  sys.ds.fillRect(num(arg0) - 5, num(arg1) - 1, num(arg0) + 5, num(arg1) + 1, sys.ds.mixColor(255,0,0));
  sys.ds.fillRect(num(arg0) - 1, num(arg1) - 5, num(arg0) + 1, num(arg1) + 5, sys.ds.mixColor(255,0,0));
}


function draw_lat_lon {
  draw_cross(
    xpos + num(((arg1 + map_x[current_map]*(-1.0)) * map_xscale[current_map])*scaler),
    ypos + num(((arg0 + map_y[current_map]*(-1.0)) * map_yscale[current_map])*scaler)
  );
}


function draw_dot { # lat, lon, color
  sys.ds.fillCircle(
    xpos + num(((arg1 + map_x[current_map]*(-1.0)) * map_xscale[current_map])*scaler),
    ypos + num(((arg0 + map_y[current_map]*(-1.0)) * map_yscale[current_map])*scaler),
    5,
    arg2
  );
}


function draw_line { # lat, lon, lat, lon, color
  sys.ds.drawLine(
    xpos + num(((arg1 + map_x[current_map]*(-1.0)) * map_xscale[current_map])*scaler),
    ypos + num(((arg0 + map_y[current_map]*(-1.0)) * map_yscale[current_map])*scaler),
    xpos + num(((arg3 + map_x[current_map]*(-1.0)) * map_xscale[current_map])*scaler),
    ypos + num(((arg2 + map_y[current_map]*(-1.0)) * map_yscale[current_map])*scaler),
    arg4
  );
}


function redrawMap {
  if(sys.o.getId() != 0) return;

  sys.ds.setArea(1, 65, 286, 286);
  set_sizes();

  if ((arg1 == 1) or xPos_o != xPos or yPos_o != yPos) {
    sys.ds.clearArea(sys.gui.getColor(COL_BACKGROUND));
    #sys.ds.drawImage(xpos, ypos, map_dscale, map_dscale, map_file[current_map]);
    if (arg2 == 0) {
      tiledDraw(xpos, ypos, map_dscale, current_map);
    } 
  }
  
  if (track_display) {
    trk_draw();
  }
  
  # test dots
  #draw_dot(-48.9745986, 14.4743400, sys.ds.mixColor(255,0,0));
  #draw_dot(-48.9693728, 14.4858519, sys.ds.mixColor(255,0,0));
  #draw_dot(-48.9770914, 14.4868283, sys.ds.mixColor(255,0,0));

  if (arg0) {
    xPos = get_xpos(lon, lonS);

    yPos = get_ypos(lat, latS);
    draw_lat_lon(yPos, xPos);  

    xPos_o = xPos;
    yPos_o = yPos;
  }
}


function tiledDraw { # x, y, dscale, map_id
  if(map_tiled[arg3] == 0) {
    sys.ds.drawImage(arg0, arg1, arg2, arg2, map_file[arg3]);
    return;
  }
   
  local tile_size = 128;
  
  if(arg2 > 0) {
    tile_size = 128 * arg2;
  } else {
    if(arg2 == 0) {
      tile_size = 64;
    }
    if(arg2 == -1) {
      tile_size = 32;
    }
    if(arg2 == -2) {
      tile_size = 16;
    }
    if(arg2 == -3) {
      tile_size = 8;
    }
  }
  
  
  # tile id
  local tile_x = arg0/tile_size;
  local tile_y = arg1/tile_size;
  
  if(tile_x < 0) tile_x *= -1;
  if(tile_y < 0) tile_y *= -1;
  
  #print("x: " + arg0 + " y: " + arg1 + " scale: " + arg2);
  
  local draw_x = arg0 - (arg0/tile_size)*tile_size;
  local draw_y = arg1 - (arg1/tile_size)*tile_size;
  
  #print("draw_x" + draw_x);
  
  local i = 0;
  local b = 0;
  
  local bMax = view_h / tile_size + 2;
  local iMax = view_w / tile_size + 2;
  
  if (bMax == 1) bMax = 2;
  if (iMax == 1) iMax = 2;
  
  for(b = 0; b < bMax; b++;) {
    for(i = 0; i < iMax; i++;) {
      sys.ds.drawImage(
        draw_x + i*tile_size,
        draw_y + b*tile_size,
        arg2, arg2,
        map_file[arg3] + "/" + "tile_" + tile_x + i + "_" + tile_y + b + ".p16"
      );
      #print("draw: " + "tile_" + tile_x + i + "_" + tile_y + b + ".p16 size:" + tile_size + "x: " + draw_x + i*tile_size + " y: " + draw_y + b*tile_size);
    }
  }
}


function center { #xpos, ypos
  set_sizes();
  local a = float(num(((arg0 + map_x[current_map]*(-1.0)) * map_xscale[current_map])*scaler) - view_w/2)/float(parH)*1000.0;
  local b = float(num(((arg1 + map_y[current_map]*(-1.0)) * map_yscale[current_map])*scaler) - view_h/2)/float(parV)*1000.0;

  print("center x:" + a);
  print("center y:" + b);
  
  if(num(a) > 1000) a = 1000;
  if(num(a) < 0)    a = 0;
  if(num(b) > 1000) b = 1000;
  if(num(b) < 0)    b = 0;
  
  
  sys.gui.setValue(hBar, num(a));
  sys.gui.setValue(vBar, num(b));
}


##############################################################################
## Track routines ############################################################
##############################################################################
import "~tracking.svs"


##############################################################################
## Gui update ################################################################
##############################################################################

function update {
  
  # Redraw handling
  
  if(redraw > 1) {
    redraw--;
  }
  
  if (redraw == 1 or sys.os.getRedraw()) {
    redraw--;
    redrawMap((fix != "0") and (fix !=""), 1);
  }
  
  # gui handlers
  if(sys.gui.getEvent(hBar) == EV_HOLD or sys.gui.getEvent(vBar) == EV_HOLD) {
    redrawMap((fix != "0") and (fix !=""), 1, 1);
  }
  
  if(sys.gui.getEventC(hBar) == EV_RELEASED or sys.gui.getEventC(vBar) == EV_RELEASED) {
    redraw = 1;
  }
  
  if(sys.hw.btn.getEvent(BTN_UP) == EV_PRESSED) {
    if(sys.gui.getValue(vBar) > 0) {
      sys.gui.setValue(vBar, sys.gui.getValue(vBar) - 10);
    }
    sys.hw.btn.clrEvent(BTN_UP);
    redraw = 1;
  }
  
  if(sys.hw.btn.getEvent(BTN_DOWN) == EV_PRESSED) {
    if(sys.gui.getValue(vBar) < 990) {
      sys.gui.setValue(vBar, sys.gui.getValue(vBar) + 10);
    }
    sys.hw.btn.clrEvent(BTN_DOWN);
    redraw = 1;
  }
  
  if(sys.hw.btn.getEvent(BTN_LEFT) == EV_PRESSED) {
    if(sys.gui.getValue(hBar) > 0) {
      sys.gui.setValue(hBar, sys.gui.getValue(hBar) - 10);
    }
    sys.hw.btn.clrEvent(BTN_LEFT);
    redraw = 1;
  }
  
  if(sys.hw.btn.getEvent(BTN_RIGHT) == EV_PRESSED) {
    if(sys.gui.getValue(hBar) < 990) {
      sys.gui.setValue(hBar, sys.gui.getValue(hBar) + 10);
    }
    sys.hw.btn.clrEvent(BTN_RIGHT);
    redraw = 1;
  }
  
  if(sys.gui.getEventC(bP) == EV_RELEASED) {
    map_dscale++;
    redraw = 1;
  }
  
  if(sys.gui.getEventC(bM) == EV_RELEASED and map_dscale > -3) {
    map_dscale--;
    redraw = 1;
  }
  
  if(sys.gui.getEventC(bS) == EV_RELEASED or sys.hw.btn.getEvent(BTN_B) == EV_PRESSED) {
    if (pos_acq) {
      center(xPos, yPos);
    } else {
      if (track_display and trk_len != 0) {
        center(trk_lon[0], trk_lat[0]);
      }
    }
    sys.hw.btn.clrEvent(BTN_B);
    redraw = 1;
  }
  
  if(sys.gui.getEventC(tBNew) == EV_RELEASED) {
    if(track_enabled == 0 and track_display == 0) {
      if(pos_acq) {
        trk_reset();
        trk_add_point(get_ypos(lat, latS), get_xpos(lon, lonS));
        sys.gui.setStr(tBNew, "Stop");
      }
    } else { 
      # stop tracking
      trk_stop();
      sys.gui.setStr(tBNew, "New track");
    }
    
    redraw = 1;
  }
  
  if (sys.gui.getEventC(bMapSel) == EV_RELEASED) {
    # Overlay screen must be created right away before calling sys.o.setScr
    menu1 = ddm_create(bMapSel);
    ddm_add_btn(map_name[0]);
    ddm_add_btn(map_name[1]);
    ddm_add_btn(map_name[2]);
  }
  
  i = ddm_handle(menu1);
  if (i > 0) {
    set_map(i - 1);
    ddm_exit();
  }
  
  if (sys.gui.getEventC(bInfo) == EV_RELEASED) {
    sys.gui.setValue(frame, sInfo);
    sys.gui.setSelect(bInfo, 1);
    sys.gui.setSelect(bTr, 0);
  }
  
  if (sys.gui.getEventC(bTr) == EV_RELEASED) {
    sys.gui.setValue(frame, sTrack);
    sys.gui.setSelect(bInfo, 0);
    sys.gui.setSelect(bTr, 1);
  }
  
  
  if (sys.gui.getEventC(bAutoFit) == EV_RELEASED and pos_acq) {
    map_dscale = 2;
    center(xPos, yPos);
    redraw = 1;
  }

  if(sys.gui.getEventC(tBLoad) == EV_RELEASED) {
    sys.os.subProcess("lib/fsl2.svs", &trk_load, "appdata/gps/", 0, "-filter gps");
    return;
  }
  
  if(sys.hw.getLcdState() != lcdPrevState) {
    if (sys.hw.getLcdState() == 1) {
      sys.hw.ePinDef(5, PIN_ALT, PIN_NOPULL);
      sys.hw.ePinDef(6, PIN_ALT, PIN_NOPULL);
    } else {
      sys.hw.ePinDef(5, PIN_IN, PIN_NOPULL);
      sys.hw.ePinDef(6, PIN_IN, PIN_NOPULL);
    } 
    
    lcdPrevState = sys.hw.getLcdState();
  }
  
  
  # read uart data
  if (sys.hw.getLcdState() == 1) {
    local x = "";
    
    if(sys.os.inSim() == 0) { 
      if (sys.com.uartGetRd() == 2) {
        x = sys.com.uartGetStr();
        if (x != "") {
          parseNMEA(x);
          x = 0;
          gps_attempt = 0;
        } else {
          print("fail!");
        }   
      }
    } else {
      gps_attempt = 0;
      local fakepos;
      
      #fakepos = "$GPGGA,160230.00,,,,,0,00,99.99,,,,,,*60"; # Fix not yet valid
      fakepos = "$GPGGA,161134.00,5004.62525,N,01425.51380,E,1,04,2.46,395.5,M,44.0,M,,*5A"; # Prague
      #fakepos = "$GPGGA,161134.00,4858.47023,N,01428.45948,E,1,04,2.46,395.5,M,44.0,M,,*5A";
      
      # to better simulate real nmea input
      fakepos = "2,32,,*7D\n$GPGSV,3,3,11,24,67,141,,25,32,259,12,32,26,311,13*45\n$GPGLL,4858.95624,N,01427.85949,E,162151.00,A,A*6D\n$GPRMC,162152.00,A,4858.95585,N\n01427.85897,E,1.175,,191123,,,A*76\n$GPVTG,,T,,M,1.175,N,2.176,K,A*23" + fakepos +"\n$GPGSA,A,3,12,15,32,25,,,,,,,,,3.56,2.82,2.17*0F";
      
      parseNMEA(fakepos);
    }
    gc(200);
  }
  
  # update the gps info string
  if (upd_fix == 1) {
    if(timeStamp != "" or fix_valid()) {
      if(fix_valid()) {
        timeStamp = "";
        if (sys.time.getHr() < 10) {
          timeStamp = timeStamp + "0";
        }
        timeStamp = timeStamp + sys.time.getHr() + ":";
        if (sys.time.getMin() < 10) {
          timeStamp = timeStamp + "0";
        }
        timeStamp = timeStamp + sys.time.getMin() + ":";
        if (sys.time.getSec() < 10) {
          timeStamp = timeStamp + "0";
        }
        timeStamp = timeStamp + sys.time.getSec() + " "
                      +  sys.time.getDay()
                      + ". " + sys.time.getMonth()
                      + ". "+ sys.time.getYear();
      }
      
      sys.gui.setStr(txt,"fix: "+ fix + " hdop: " + hdop + " sats: " + sats + 
                      "\n\nLat: "+ getDeg(lat) +"* " + getMin(lat) + "' " + latS +
                      "\nLon: "+ getDeg(lon) +"* " + getMin(lon) +"' " + lonS +
                      "\nAlt: " + alt + " m " +
                      "\n\nLast fix: " + timeStamp + ""
                  );
      
      # map redraw
      redrawMap(1, 0);
    } else {
      sys.gui.setStr(txt, "Waiting for fix. (" + num(sats) + " sats)");
    }
    upd_fix = 0;
  }
  
  # periodical update of the tracking
  if (sys.time.getUptime() > updTime + 5 or upd_fix == 1) {
  
    updTime = sys.time.getUptime();
    
    # tracking
    if (track_enabled and pos_acq) {
      trk_add_point(get_ypos(lat, latS), get_xpos(lon, lonS), alt);
    }
    
    if (sys.hw.getLcdState() == 1) {
      if (gps_attempt > 5) {
        sys.gui.setStr(txt, "GPS communication Failed.\nIs GPS module connected?");
        pos_acq = 0;
      } else {
        if(gps_attempt > 1) {
          sys.gui.setStr(txt, "No NMEA sentence detected...");
          pos_acq = 0;
        }
        
        gps_attempt++;
      }     
    }
  }
  
  sys.gui.setValue(bar, 5 - (updTime + 5 - sys.time.getUptime()));
}

import "~nmea.svs"

function dummy {} #TODO: file is not correctly imported on stm32 without this dummy block, fix this 

