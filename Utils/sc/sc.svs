 #sda commander
 # todo: - multi select
 #
function init {
  sys.os.checkVer(1310);
  sys.os.setSingular();
  sys.gui.setRelInit(1);
  scr = sys.gui.addScreen();
  sys.os.gui.setMainScr(scr);
  sys.gui.addText(1, 0, 8, 1, "SDA Commander 2.1.1", scr);
  file_scr = sys.gui.addScreen();
  scrollbar = sys.gui.addSliderV(9, 2, 1, 9, 100, 0, scr);
  sys.gui.setSliderSize(scrollbar, 80);

  sys.gui.setScreen(file_scr, scr);
  sys.gui.setXYXY(file_scr, 0, 2, 9, 9);

  bUp = sys.gui.addButton(0, 1, 1, 1, "/\\", scr);
  bData = sys.gui.addButton(4, 1, 2, 1, "Data", scr);
  bApps = sys.gui.addButton(2, 1, 2, 1, "Apps", scr);
  
  bTabA = sys.gui.addButton(7, 1, 1, 1, "A", scr);
  bTabB = sys.gui.addButton(8, 1, 1, 1, "B", scr);

  tPath = sys.gui.addText(0, 11, 8, 1, "Dir: /", scr);

  # move, mkdir, launch, view, edit
  bCopy = sys.gui.addButton(0, 12, 3, 1, "Copy", scr);
  bRename = sys.gui.addButton(3, 12, 4, 1, "Rename", scr);
  bMove = sys.gui.addButton(3, 12, 4, 1, "Move", scr);
  bMkdir = sys.gui.addButton(0, 13, 3, 1, "MkDir", scr);
  bEdit = sys.gui.addButton(7, 12, 3, 1, "Edit", scr);
  bInfo = sys.gui.addButton(7, 13, 3, 1, "Info", scr);
  bRemove = sys.gui.addButton(3, 13, 4, 1, "Remove", scr);

  sys.gui.setSelect(bData, 1);
  sys.gui.setGhost(bTabB, 1);
  sys.gui.setGrayout(bEdit, 1);
  sys.gui.setVisible(bMove, 0);

  array fScrBtns[300];
  array path[30];
  
  tabApath = "";
  tabAapps = 0;
  tabAsc   = 0;
  tabBpath = "";
  tabBapps = 0;
  tabBsc   = 0;

  rldFiles();
  
  copyFname  = "";
  copyPath   = 0;
  copyInApps = 0;
  copyMove   = 0;
  renameOp   = -1;
  mkdirOp    = -1;
  ppmOvr     = -1;
  infoOvr    = 0;

  sys.gui.setGrayout(bUp, 1);

  pasteOvr = -1;
  remOvr   = -1;
  inApps   = 0;
}

import "~sc-overlays.svs"

function getsize {
  local x;
  sys.fs.open(arg0);
  x = sys.fs.size();
  sys.fs.close();

  return x;
}


function getUpCount {
  arg4 = 0;
  for(arg2 = len(arg0); arg2 > 0; arg2--;) {
    if (getcp(arg0, arg2) == "/") {
      arg4++;
    }
  }
  return arg4;
}


function updatePath {
  local i; #arg2
  local b = 0; #arg4
  local c = 0;
  
  for(i = 0; i < len(arg0); i++;) {
    if (getcp(arg0, i) == "/") {
      path[c] = substr(arg0, b, i - 1);
      print("updPath: "+path[c]);
      c++;
      b = i + 1;
    }
  }
  
  if (c == 0) {
  
    if (getcp(arg0, len(arg0)) == "/") {
      arg0 = substr(arg0, 0, len(arg0) - 1);
    }
    path[0] = arg0;
  }
  
  return c;
}

function dir_list {
  if (sys.fs.isDir(arg0)) {
    local findfil;
    local n = 0;

    for(findfil = sys.fs.find("", arg0); findfil != ""; findfil = sys.fs.findNext();) {
      if (sys.fs.isDir(arg0 + "/" + findfil)) {
        dir_list(arg0 + "/" + findfil);
        findfil = sys.fs.find("", arg0);
        local x;
        for (x = 0; x<n; x++;) {
          findfil = sys.fs.findNext();
        }
      } else {
        fScrBtns[dir_n] = arg0 + "/" + findfil;
        dir_n++;
      }
      n++;
    }
  }
  fScrBtns[dir_n] = arg0;
  dir_n++;
}

function infoDir {
  dir_n = 0;
  local files = 0;
  local dirs = 0;
  local size = 0;
  dir_list(arg0);
  
  for(local x = 0; x < dir_n; x++;) {
    if (sys.fs.isDir(fScrBtns[x])) {
      dirs++;
    } else {
      files++;
      size += getsize(fScrBtns[x]);
    }
  }
  
  if (dirs) {
    return dirs + " directories\n" + files + " files\n" +  size + " bytes total.";
  } else {
    return size + " bytes."
  }
}

function rmDir {
  dir_n = 0;
  
  dir_list(arg0);
  print("Removing:");
  for(local x = 0; x < dir_n; x++;) {
    print(""+fScrBtns[x]);
    sys.fs.delete(fScrBtns[x]);
  }
}

function ls {
  local findfil;
  local n = 0;
  print(arg0);
  for(findfil = sys.fs.find("", arg0); findfil != ""; findfil = sys.fs.findNext();) {
    if (sys.fs.isDir(arg0 + "/" + findfil)) {
      ls(arg0 + "/" + findfil);
      findfil = sys.fs.find("", arg0);
      local x;
      for (x = 0; x<n; x++;) {
        findfil = sys.fs.findNext();
      }
    } else {
      print(arg0 + "/" + findfil);
      #sys.fs.delete(arg0 + "/" + findfil);
    }
    n++;
  }  
}

function wakeup {
  rldFiles(1);
}

function rldFiles {
  sys.gui.destroy(file_scr);
  for (x = 0; x < 200; x++;) {
    fScrBtns[x] = 0;
  }

  file_scr = sys.gui.addScreen();

  sys.gui.setScreen(file_scr, scr);
  sys.gui.setXYXY(file_scr, 0, 2, 9, 9);

  i = 0;

  #load directory
  for(findfil = sys.fs.find("", "."); findfil != ""; findfil = sys.fs.findNext();) {
    fScrBtns[i] = findfil;
    i++;
  }

  numOfFiles = i;

  #sortOutDirs
  lastdir = 0;
  for(i = 0; i < numOfFiles; i++;) {
    if (sys.fs.isDir(fScrBtns[i])) {
      prac = fScrBtns[lastdir];

      fScrBtns[lastdir] = fScrBtns[i];

      fScrBtns[i] = prac;

      lastdir++;
    }
  }

  sortstring = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";

  # alphabetical sort dirs
  {
    local sorted;
    local i;
    local b;
    local sortchar;
    sorted = 0;
    for(i = 1; i < len(sortstring); i++;) {
      sortchar = getcp(sortstring, i);
      for(b = sorted; b < lastdir; b++;){
        if (getcp(fScrBtns[b], 1) == sortchar) {
          local prac;
          prac = fScrBtns[b];
          fScrBtns[b] = fScrBtns[sorted];
          fScrBtns[sorted] = prac;
          sorted++;
        }
      }
    }
  }

  # alphabetical sort files
  {
    local sorted;
    local i;
    local b;
    local sortchar;
    sorted = lastdir;
    for(i = 1; i < len(sortstring); i++;) {
      sortchar = getcp(sortstring, i);
      for(b = sorted; b < numOfFiles; b++;){
        if (getcp(fScrBtns[b], 1) == sortchar) {
          local prac;
          prac = fScrBtns[b];
          fScrBtns[b] = fScrBtns[sorted];
          fScrBtns[sorted] = prac;
          sorted++;
        }
      }
    }
  }

  #load sorted buttons
  for(i = 0; i < numOfFiles; i++;) {
    findfil =  fScrBtns[i];
    fScrBtns[i] = sys.gui.addButton(0, i, 6, 1, findfil, file_scr);

    if (sys.fs.isDir(findfil)) {
      sys.gui.setTexAlign(sys.gui.addText(6, i, 3, 1, "(Dir)", file_scr), ALIGN_RIGHT);
    } else {
      sys.gui.setTexAlign(sys.gui.addText(6, i, 3, 1, "" + humanSize(getsize(findfil)), file_scr), ALIGN_RIGHT);
    }
  }
  
  if (arg0 == 0) {
    sys.gui.setValue(scrollbar, 0);
  }

  if (i > 9) {
    sys.gui.setParam(scrollbar, 32 * i - 8 * 32);
    sys.gui.setGrayout(scrollbar, 0);
  } else {
    sys.gui.setGrayout(scrollbar, 1);
  }
  
  sys.gui.setGrayout(bEdit, 1);
  sys.gui.setGrayout(bInfo, 1);
  selected = -1;
}


function humanSize {
  if (arg0 > 1000000) {
    return arg0/1000000 + "M";
  }
  
  if (arg0 > 1000) {
    return arg0/1000 + "K";
  }
  
  return arg0 + "";
}


function getPath {
  local i;
  local pathStr;
  pathStr = "";
  for (i = 0; i < upCount; i++;) {
    pathStr += path[i] + "/";
  }

  return pathStr;
}

function getFolder {
  arg3 = 0;
  for(arg2 = len(arg0); arg2 > 0; arg2--;) {
    if (getcp(arg0, arg2) == "/") {
      return substr(arg0, 0, arg2);
    }
    if (getcp(arg0, arg2) == ".") {
      arg3 = 1;
    }
  }
  if (arg3) return ""; # 
  
  return arg0;
}

function switchDir {

  sys.fs.chDir(arg1);
  inApps = arg1;
  
  sys.gui.setSelect(bData, not inApps);
  sys.gui.setSelect(bApps, inApps);
  
  sys.fs.chDir(getFolder(arg0));
  updatePath(getFolder(arg0));
  upCount = getUpCount(arg0);
  print("uc:" + upCount);
  if(upCount) {
    sys.gui.setGrayout(bUp, 0);
  } else {
    sys.gui.setGrayout(bUp, 1);
  }
  rldFiles();
  
  sys.gui.setStr(tPath, "Dir: /" + getPath());
}

function tryOpen {
  # arg0 -> fname
  extension = getcp(arg0, len(arg0) - 2) + getcp(arg0, len(arg0) -1) + getcp(arg0, len(arg0));
  print(extension);
  if (extension == "svs") {
    print("running:" + getPath()+arg0);
    sys.os.subProcCWD(1);
    sys.os.subProcess(arg0, "", 0, 0, 0);
  }

  if (extension == "txt") {
    sys.os.subProcCWD(0);
    sys.os.subProcess("Productivity/notepad/notepad.svs", "", getPath()+arg0, 0, 0);
    print("opening: notepad/notepad.svs " + getPath()+arg0);
  }
  
  if (extension == "mnu") {
    sys.os.subProcCWD(0);
    sys.os.subProcess("Utils/med/med.svs", "", getPath()+arg0, 0, 0);
    print("opening: med.svs " + getPath()+arg0);
  }
  
  if (extension == "p16") {
    sys.os.subProcCWD(0);
    sys.os.subProcess("Utils/imageview/imageview.svs", "", getPath()+arg0, inApps, 0);
    print("opening: imageview.svs " + getPath()+arg0);
  }

  if (extension == "ppm") {
    showPpm(arg0);
  }
}

function updFiles {
  local x;
  for (x = 0; x < numOfFiles; x++;) {
    if (sys.gui.getEventC(fScrBtns[x]) == EV_RELEASED) {
      sys.gui.setGrayout(bInfo, 0);
      if(sys.fs.isDir(sys.gui.getStr(fScrBtns[x]))) {
        sys.gui.setGrayout(bEdit, 1);
      } else {
        sys.gui.setGrayout(bEdit, 0);
      }
      if (selected == -1) {
        sys.gui.setSelect(fScrBtns[x], 1);
        selected = x;
      } else {
        if (selected == x) {
          if (sys.fs.isDir(sys.gui.getStr(fScrBtns[x]))) {
            sys.fs.chDir(sys.gui.getStr(fScrBtns[x]));
            path[upCount] = sys.gui.getStr(fScrBtns[x]);
            rldFiles(0);
            sys.gui.setGrayout(bUp, 0);
            upCount++;
            sys.gui.setStr(tPath, "Dir: /" + getPath());
          } else {
            tryOpen(sys.gui.getStr(fScrBtns[x]));
          }
        } else {
          sys.gui.setSelect(fScrBtns[selected], 0);
          sys.gui.setSelect(fScrBtns[x], 1);
          selected = x;
        }
      }
    }
  }
}

function update {
  updFiles();
  sys.gui.setYscroll(file_scr, sys.gui.getValue(scrollbar) - 8);
  buttonScroll(scrollbar, 16);

  if (sys.gui.getEventC(bUp) == EV_RELEASED) {
    sys.fs.chDir("..");
    rldFiles(0);
    upCount--;
    sys.gui.setStr(tPath, "Dir: /" + getPath());
    if (upCount == 0){
      sys.gui.setGrayout(bUp, 1);
    }
  }

  if (sys.gui.getEventC(bData) == EV_RELEASED) {
    inApps = 0;
    sys.fs.chDir();
    sys.gui.setGrayout(bUp, 1);
    sys.gui.setSelect(bData, 1);
    sys.gui.setSelect(bApps, 0);
    sys.gui.setStr(tPath, "Dir: /");
    upCount = 0;
    rldFiles(0);
  }

  if (sys.gui.getEventC(bApps) == EV_RELEASED) {
    inApps = 1;
    sys.fs.chDir(1);
    sys.gui.setGrayout(bUp, 1);
    sys.gui.setSelect(bData, 0);
    sys.gui.setSelect(bApps, 1);
    sys.gui.setStr(tPath, "Dir: /");
    upCount = 0;
    rldFiles(0);
  }
  
  # tab control
  if (sys.gui.getEventC(bTabA) == EV_RELEASED and sys.gui.getGhost(bTabA)) {
    tabBpath = getPath();
    tabBapps = inApps;
    tabBsc   = sys.gui.getValue(scrollbar);
    
    print("new:" + tabApath +  " old: " + tabBpath);
    
    switchDir(tabApath, tabAapps);
    sys.gui.setValue(scrollbar, tabAsc);
    sys.gui.setGhost(bTabA, 0);
    sys.gui.setGhost(bTabB, 1);
  }
  
  if (sys.gui.getEventC(bTabB) == EV_RELEASED and sys.gui.getGhost(bTabB)) {
    tabApath = getPath();
    tabAapps = inApps;
    tabAsc   = sys.gui.getValue(scrollbar);
    
    print("new:" + tabBpath +  " old: " + tabApath);
    
    switchDir(tabBpath, tabBapps);
    sys.gui.setValue(scrollbar, tabBsc);
    sys.gui.setGhost(bTabA, 1);
    sys.gui.setGhost(bTabB, 0);
  }

  if (sys.gui.getEventC(bCopy) == EV_RELEASED) {
    if (copyFname == "") {
      if (selected != -1) {
        copyFname = sys.gui.getStr(fScrBtns[selected]);
        copyPath = getPath();
        copyInApps = inApps;
        sys.fs.copySource(copyFname);
        sys.gui.setStr(bCopy, "Paste");
        sys.gui.setVisible(bMove, 1);
        sys.gui.setVisible(bRename, 0);
        copyMove = 0;
      }
    } else {
      pasteOvInit();
    }
  }
  
  if (sys.gui.getEventC(bMove) == EV_RELEASED) {
    copyMove = 1;
    pasteOvInit();
  }

  if (sys.gui.getEventC(bRemove) == EV_RELEASED) {
    if (selected != -1) {
      remName = sys.gui.getStr(fScrBtns[selected]);
      remOvrInit();
    }
  }
  
  if (sys.gui.getEventC(bEdit) == EV_RELEASED) {
    if (selected != -1 and not sys.fs.isDir(sys.gui.getStr(fScrBtns[selected]))) {
      sys.os.subProcCWD(0);
      sys.os.subProcess("Development/proged/proged.svs", "", getPath() + sys.gui.getStr(fScrBtns[selected]), inApps, 0);
      print("opening: proged" + getPath() + sys.gui.getStr(fScrBtns[selected]));
    }
  }
  
  if (sys.gui.getEventC(bInfo) == EV_RELEASED and selected >= 0) {
    local txt = "";
    
    txt += "Name: " + sys.gui.getStr(fScrBtns[selected]) + "\n" + infoDir(sys.gui.getStr(fScrBtns[selected]));
    
    infoOvr = infoOvrInit(txt);
    rldFiles(1);
  }

  if (sys.gui.getEventC(bRename) == EV_RELEASED) {
    if (selected != -1) {
      renameFile = sys.gui.getStr(fScrBtns[selected]);
      renameOp = textOvInit();
      renameName = renameFile;
      sys.gui.setStr(textLbl, "New name:");
    }
  }

  if (sys.gui.getEventC(bMkdir) == EV_RELEASED) {
    mkdirOp = textOvInit();
    mkdirName = "";
    sys.gui.setStr(textLbl, "New directory:");
  }

  if (sys.o.getId() == pasteOvr and sys.o.getId() != 0) {
    pasteOvUpd();
  }
  
  infoOvrUpdate();

  remOvrUpdate();

  if (sys.o.getId() == renameOp) {
    handleRename();
  }

  if (sys.o.getId() == mkdirOp) {
    handleMkdir();
  }

  if (sys.o.getId() == ppmOvr) {
    if (sys.gui.getEventC(ppmOk) == EV_RELEASED) {
      sys.o.destroy();
    }
  }
}

function buttonScroll {
  # Up
  if(sys.hw.btn.getEvent(BTN_UP) == EV_PRESSED) {
    if (sys.gui.getValue(arg0) > arg1) {
      sys.gui.setValue(arg0, sys.gui.getValue(arg0) - arg1);
    } else {
      sys.gui.setValue(arg0, 0);
    }
  }
  sys.hw.btn.clrEvent(BTN_UP);

  # Down
  if(sys.hw.btn.getEvent(BTN_DOWN) == EV_PRESSED) {
    if (sys.gui.getValue(arg0) < sys.gui.getParam(arg0) - arg1) {
      sys.gui.setValue(arg0, sys.gui.getValue(arg0) + arg1);
    } else {
      sys.gui.setValue(arg0, sys.gui.getParam(arg0));
    }
  }
  sys.hw.btn.clrEvent(BTN_DOWN);
}

function handleRename {
  renameName = sys.os.gui.handleText(textTxt, renameName);
  if (sys.gui.getEventC(textOk) == EV_RELEASED) {
    if (not sys.fs.exists(renameName)) {
      sys.fs.rename(renameFile, renameName);
      sys.o.destroy();
      sys.os.hideKbd();
      rldFiles(1);
      return;
    }
  }

  if (sys.gui.getEventC(textCancel) == EV_RELEASED) {
    sys.o.destroy();
    sys.os.hideKbd();
    return;
  }
}

function handleMkdir {
  mkdirName = sys.os.gui.handleText(textTxt, mkdirName);
  if (sys.gui.getEventC(textOk) == EV_RELEASED) {
    sys.fs.mkDir(mkdirName);
    sys.o.destroy();
    sys.os.hideKbd();
    rldFiles(1);
    return;
  }

  if (sys.gui.getEventC(textCancel) == EV_RELEASED) {
    sys.o.destroy();
    sys.os.hideKbd();
    return;
  }
}

