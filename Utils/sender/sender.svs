function init {
  sys.gui.setRelInit(1);

  scr = sys.gui.addScreen();
  
  sys.gui.addText(1, 0, 7, 1, "Serial Send&Receive", scr);
  
  send_scr = sys.gui.addScreen(1, 1, 8, 5, scr);
  
  sys.gui.addText(1, 0, 4, 1, "Send", send_scr);
  
  btn_fsl = sys.gui.addButton(1, 1, 6, 1, "Select file", send_scr);
  
  b_send = sys.gui.addButton(1, 3, 4, 1, "Send", send_scr);
  
  tb_text = sys.gui.addCheckBox(1, 2, 3, 1, "Text", send_scr);
  tb_bin = sys.gui.addCheckBox(4, 2, 3, 1, "Bin", send_scr);
  sys.gui.setValue(tb_text, 1);
  
  rcv_scr = sys.gui.addScreen(1, 7, 8, 5, scr);
  
  sys.gui.addText(1, 0, 4, 1, "Receive", rcv_scr);
  
  btn2 = sys.gui.addButton(1, 3, 4, 1, "Receive", rcv_scr);
  
  savefile =  sys.gui.addText(1, 1, 6, 1, "", rcv_scr);
  
  sys.gui.setTexEd(savefile, 1);
  
  status = sys.gui.addText(1, 12, 10, 12, "Nothing to do...", scr);
  
  sys.os.gui.setMainScr(scr);

  # external pin defines
  sys.hw.ePinDef(5, PIN_ALT, PIN_NOPULL);
  sys.hw.ePinDef(6, PIN_ALT, PIN_NOPULL);
  
  sys.com.uartRcvIT(); # start the rcv
  
  uart_str = "";
  x = "";
  filename = "";
  filename_data = 0;
  savefile_str = "rcv.txt";
  savefile_path = "Received/";
  rcv = 0;
  len = 0;
  maxlen = 0;
  ov_id = 0;
  
  send = 0;
  
  transmit_mode = "T";
  receive_mode = "T";
  
  array bin_trs[32];
  
  
}

function add_status {
  sys.gui.setStr(status, sys.gui.getStr(status) + "\n" + arg0);
  print("status update: " + arg0);
}

function status_reset {
  sys.gui.setStr(status, "Nothing...");
}


function get_fname {
  for(arg2 = len(arg0); arg2 > 0; arg2--;) {
    if (getcp(arg0, arg2) == "/") {
      return substr(arg0, arg2 + 1, len(arg0));
    }
  }
  return arg0;
}


function get_param {
  local i;
  local a;
  local b;

  for (i = 0; i < len(arg0); i++;) {
    if (getcp(arg0, i) == "!") {
      i++;
      arg1--;
      if (arg1 == 0) {
        break;
      }
      
    }
  }

  a = i;

  for (i = a; i < len(arg0) - 1; i++;) {
    if (getcp(arg0, i) == "!") {
      i--;
      break;
    }
  }

  b = i;
  print("arg: " + substr(arg0, a, b));
  return substr(arg0, a, b);
}


function update {

  savefile_path = sys.os.gui.handleText(savefile, savefile_path);

  if (sys.gui.getEventC(b_send) == EV_RELEASED and filename != "") {
    len = 0;
    sys.fs.chDir(filename_data);
    sys.fs.open(filename);
    status_reset();
    add_status("sending:" + filename);
    send = 1;
    
    init_overlay("Sending:", sys.fs.size(), get_fname(filename));
    
    sys.com.uartTrs("TRANSMIT!");
    sys.com.uartTrs("N:" + get_fname(filename) + "!");
    sys.com.uartTrs("S:" + sys.fs.size() + "!");
    sys.com.uartTrs("M:" + transmit_mode + "!\n");
    sys.com.uartGetStr(); # clear the reciever
    sys.cnt.set(200);
  }
  
  if (sys.gui.getEventC(tb_bin) == EV_PRESSED) {
    sys.gui.setValue(tb_text, 0);
    transmit_mode = "B";
  }
  
  if (sys.gui.getEventC(tb_text) == EV_PRESSED) {
    sys.gui.setValue(tb_bin, 0);
    transmit_mode = "T";
  }
  
  if (send == 1 and sys.cnt.get() == 0) {
    if (sys.com.uartGetRd() == 2) {
      x = sys.com.uartGetStr();
      if (x != "") {
        if (getcp(x, 1) == "O") {
          add_status("sending: confirmed");
          send = 2;
          sys.cnt.set(200);
        }
        if (getcp(x, 1) == "C") {
          add_status("sending: cancelled");
          sys.gui.setGrayout(ov_bar, 1);
          sys.fs.close();
          send = 0;
        }
      }
    }
  }
  
  if (send == 2 and sys.cnt.get() == 0 and transmit_mode == "T") {
    c = sys.fs.readChars(128);
    if (c != "") {
      sys.com.uartTrs(c);
      len + = rlen(c);
      handle_progbar(len);
      #print("transmit:" + c);
    } else {
      send = 0;
      add_status("sending done, len:" + len);
      handle_progbar(len);
      sys.fs.close();
    }
  }
  
  if (send == 2 and sys.cnt.get() == 0 and transmit_mode == "B") {
    local i;
    for (i = 0; i < 32; i++;) {
      bin_trs[i] = -1;
    }
    
    for (i = 0; i < 32; i++;) {
      bin_trs[i] = sys.fs.readByte();
    }
    
    if (bin_trs[0] >= 0) {     
      i = 0;
      while (bin_trs[i] >= 0) {
        sys.com.qAdd(bin_trs[i]);
        len++;
        i++;
        if (i == 32) {
          break;
        }
      }
      
      sys.com.uartTrsQ();
      handle_progbar(len);
      #print("transmit:" + c);
    } else {
      send = 0;
      add_status("sending done, len:" + len);
      handle_progbar(len);
      sys.fs.close();
    }
  }

  if (sys.gui.getEventC(btn2) == EV_RELEASED) {
    #sys.gui.setSelect(btn2, get);
    status_reset();
    add_status("recieve:" + savefile_str);
    sys.com.uartGetStr(); #clear the buffer
    rcv = 1;
    len = 0;
    maxlen = 0;
  }
   
  if(sys.gui.getEventC(btn_fsl) == EV_RELEASED) {
    sys.os.subProcess("lib/fsl.svs", &callRet, 0, 0, 0);
    return;
  }
  
  if (rcv == 1) {
    if (sys.com.uartGetRd() == 2) {
      x = sys.com.uartGetStr();
      if (x != "") {
      
        if (getcp(get_param(x, 1), 1) == "N") {
          savefile_str = substr(get_param(x, 1), 3, len(get_param(x, 1)));
          add_status("recieve: got name:" + savefile_str);
        }
        
        if (getcp(get_param(x, 2), 1) == "S") {
          maxlen = num(substr(get_param(x, 2), 3, len(get_param(x, 2))));
          add_status("recieve: got len:" + maxlen);
        }
        
        if (getcp(get_param(x, 3), 3) == "T") {
          receive_mode = "T";
          add_status("receive: Text mode");
        }
        
        if (getcp(get_param(x, 3), 3) == "B") {
          receive_mode = "B";
          add_status("receive: Binary mode");
        }
        
      } else {
        print("fail!");
      }   
    }
  }
  
  if (rcv == 1 and maxlen != 0) {
    rcv = 2;
    
    if (not sys.fs.exists(savefile_path)) {
      sys.fs.mkDir(savefile_path);
    }
    
    sys.fs.chDir(0);
    sys.fs.open(savefile_path + savefile_str);
    add_status("recieve: opening file " + savefile_str);
    init_overlay("Recieve " + savefile_str + "?", maxlen, savefile_str);
    sys.gui.setVisible(ov_ok, 1);
  }
  
  if (rcv == 2) {
    if (sys.gui.getEventC(ov_ok) == EV_RELEASED) {
      init_overlay("Recieving:", maxlen, savefile_str);
      sys.com.uartTrs("OK\n");
      rcv = 3;
      sys.cnt.set(1000);
    }
  }
  
  if (rcv == 3 and receive_mode == "T") {
    if (sys.com.uartGetRd()) {
      x = sys.com.uartGetStr();
      if (x != "") {
        sys.fs.writeChars(x);
        len + = rlen(x);
        #get = 0;
        handle_progbar(len);
        sys.cnt.set(1000);
      } else {
        print("fail!");
      }   
    }
  }
  
  if (rcv == 3 and receive_mode == "B") {
    if (sys.com.uartGetRd()) {
      x = sys.com.uartGetBytes();
      if (x != 0) {
        local i;
        for(i = 0; i < x; i++;) {
          sys.fs.writeByte(sys.com.uartGetByte(i));
          len++;
        }
        handle_progbar(len);
        sys.cnt.set(1000);
      } else {
        print("fail!");
      }   
    }
  }
  
  if ((sys.cnt.get() == 0 or len >= maxlen) and rcv == 3) {
    add_status("recieve: finished:" + len);
    if (len < maxlen) {
      sys.gui.setGrayout(ov_bar, 1);
    }
    sys.fs.close();
    rcv = 0;
  }
  
  handle_overlay();

}

function callRet {
  print("callback returned");
  print("argument0: " + arg0);
  filename = arg0;
  filename_data = arg1;
  sys.gui.setStr(btn_fsl, "" + get_fname(arg0));
}


function init_overlay {
  ov_screen = sys.gui.addScreen();
  sys.gui.addText(1, 0, 4, 1, arg0, ov_screen);
  sys.gui.addText(1, 1, 6, 1, arg2, ov_screen);
  ov_ok = sys.gui.addButton(1, 4, 2, 1, "Ok", ov_screen);
  ov_cancel = sys.gui.addButton(4, 4, 3, 1, "Cancel", ov_screen);
  ov_bar = sys.gui.addBar(1, 2, 6, 1, arg1, 0, ov_screen);
  
  ov_id = sys.o.setScr(ov_screen);
  sys.gui.setVisible(ov_ok, 0);
  sys.o.setY(230);
}

function handle_progbar {
  sys.gui.setValue(ov_bar, arg0);
  
  if (arg0 == sys.gui.getParam(ov_bar)) {
    sys.gui.setStr(ov_cancel, "Close");
  }
}

function handle_overlay {
  if(sys.o.getId() != ov_id or sys.o.getId() == 0) {
    return;
  }

  if (sys.gui.getEventC(ov_cancel) == EV_RELEASED) {
    send = 0;
    rcv = 0;
    sys.o.destroy();
    sys.com.uartTrs("C\n");
    return;
  }
}
