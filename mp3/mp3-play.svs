#*
  App for controlling DFPlayer mini module
  it needs song database file that could be generated by following shellscript
  Run it in the mp3 folder of your DFPlayer card, then put the resulting mp3-list.dat
  in DATA folder of your SDA

find . -maxdepth 1 -name '*.mp3' | awk 'BEGIN{ a=0 }{ printf "mp3info -p \"%d=%%a - %%t (%%f) \\n%d_len=%%S\\n\" \"%s\" \n", a, a, substr($0,3), a++ }' \
| bash > ~/mp3-list.dat

*#
function ds_cmd { # cmd, param1, param2
  sys.com.qAdd(0x7E);
  sys.com.qAdd(0xFF);
  sys.com.qAdd(0x06);
  sys.com.qAdd(arg0);
  sys.com.qAdd(0x00);
  sys.com.qAdd(arg1);
  sys.com.qAdd(arg2);

  local sum;

  sum = 65536 - (0xFF + 0x06 + arg0 + arg1 + arg2);

  sys.com.qAdd(sum / 256);
  sys.com.qAdd(sum % 0xFF00);

  sys.com.qAdd(0xEF);
  sys.com.qAdd(0x00);
  sys.com.uartTrsQ();
}

function ds_play {
  ds_cmd(0x0D, 0, 0);
}

function ds_play_s #* (song no)*# {
  ds_cmd(0x03, arg0/256, arg0%256);
}

function ds_pause {
  ds_cmd(0x0E, 0, 0);
}

function ds_prev {
  ds_cmd(0x02, 0, 0);
}

function ds_next {
  ds_cmd(0x01, 0, 0);
}

function ds_vol_incr {
  ds_cmd(0x04, 0, 0);
}

function ds_vol_decr {
  ds_cmd(0x05, 0, 0);
}

function ds_rnd {
  ds_cmd(0x18, 0, 0);
}

function ds_vol {
  ds_cmd(0x06, 0, arg0);
}

function init {
  sys.os.checkVer(710);
  sys.os.setSingular();
  scr = sys.gui.addScreen();
  sys.gui.setRelInit(1);
  sys.gui.addText(1,0,7,1, "SDA Player", scr);
  btn = sys.gui.addButton(4,11,2,2, "Play", scr);
  btn_n = sys.gui.addButton(7,11,2,2, ">>", scr);
  btn_p = sys.gui.addButton(1,11,2,2, "<<", scr);
  btn_rnd = sys.gui.addCheckBox(1,8,4,1, "Random", scr);
  fnameText = sys.gui.addText(1,1,7,1, "Current: None", scr);
  sys.gui.addText(1,9,3,1, "Vol:", scr);
  vol_sld = sys.gui.addSliderH(4,9,5,1, 30, 15, scr);
  timeBar = sys.gui.addBar(1, 7, 8, 1, 0, 10, scr);
  sys.os.gui.setMainScr(scr);
  sys.hw.btn.stdbyEn(1);
  # DFPlayer on the internal expansion by default
  # Pin16 is used to enable power for the player
  sys.hw.iPinDef(15, PIN_ALT, 0);
  sys.hw.iPinDef(16, PIN_OUT, 0);
  sys.hw.iPinSet(16, 1);

  sys.fs.conf.open("mp3-list.dat");
  array btnList[5];
  array prevSongs[15];
  numOfSongs = countSongs();

  listScr = 0;
  addList();
  btnUp = sys.gui.addButton(8,2,1,2, "\n/\\", scr);
  btnDn = sys.gui.addButton(8,4,1,2, "\n\\/", scr);

  listBegin = 0;
  prevSong = 0;

  if (sys.fs.conf.exists("volume")) {
    sys.gui.setValue(vol_sld, num(sys.fs.conf.read("volume")));
    setInitVolFlag = 40;
  }
}

function countSongs {
  n = 0;
  while(sys.fs.conf.exists(n + "")) {
    n++;
  }

  return n;
}

function addList {
  if (listScr != 0){
    sys.gui.destroy(listScr);
  }

  listScr = sys.gui.addScreen();
  sys.gui.setScreen(listScr, scr);
  sys.gui.setXYXY(listScr, 1, 2, 7, 4);

  local b;
  b = 0;
  for(n = listBegin; n < (listBegin + 4); n++;) {
    if(sys.fs.conf.exists(n + "")) {
      btnList[b] = sys.gui.addButton(0, 0 + b, 7, 1, sys.fs.conf.read(n+"") , listScr);
      b++;
    } else {
      break;
    }
  }

  listMax = b;
}

function upd_list {
  local b;
  for(b = 0; b < listMax; b++;) {
    if (sys.gui.getEventC(btnList[b]) == EV_RELEASED){
      play_no(listBegin+b+1);
    }
  }
}

function play_no {
  play = 1;
  sys.gui.setStr(btn, "Stop");
  ds_play_s(arg0);
  print("play: " + arg0);
  sys.gui.setStr(fnameText, "Current: " + sys.fs.conf.read(arg0-1+""));
  waitTime = num(sys.fs.conf.read(arg0-1+"_len")) + sys.time.get();
  startTime = sys.time.get();
  sys.gui.setParam(timeBar, waitTime -  sys.time.get());

  if (prevSongs[0] != currentSong and currentSong != 0) {
    local x;
    for (x = 14; x > 0; x--;) {
      prevSongs[x] = prevSongs[x - 1];
    }

    prevSongs[0] = currentSong;
  }
  currentSong = arg0;
}

function play_next {
  if (sys.gui.getValue(btn_rnd)) {
    local rndSong;
    while (rndSong == currentSong) {
      rndSong = sys.os.rnd() % numOfSongs;
    }
    play_no(rndSong);
  } else {
    play_no(currentSong + 1);
  }
}

function update {

  # wait few cycles before setting the initial volume to let the DFPlayer boot
  if (setInitVolFlag != 0) {
    setInitVolFlag--;
    if (setInitVolFlag == 0) {
      ds_vol(sys.gui.getValue(vol_sld));
    }
  }

  upd_list();

  if (sys.gui.getEventC(btnUp) == EV_RELEASED) {
    if (listBegin >= 4) {
      listBegin = listBegin - 4;
      addList();
    }
  }

  if (sys.gui.getEventC(btnDn) == EV_RELEASED) {
    if (listBegin < numOfSongs) {
      listBegin = listBegin + 4;
      addList();
    }
  }

  if (play == 1) {
    sys.gui.setValue(timeBar, sys.gui.getParam(timeBar) - (waitTime - sys.time.get()));
  }

  if (sys.time.get() > waitTime and waitTime != 0 and play == 1 ) {
    play_next();
  }

  if (sys.gui.getEventC(btn) == EV_RELEASED) {
    if (play == 0) {
      sys.gui.setStr(btn, "Stop");
      ds_vol(sys.gui.getValue(vol_sld));
      play_next();
    } else {
      sys.gui.setStr(btn, "Play");
      ds_pause();
      play = 0;
    }
  }

  if (sys.gui.getEventC(btn_n) == EV_RELEASED) {
    ds_vol(sys.gui.getValue(vol_sld));
    play_next();
  }

  if (sys.hw.btn.getEvent(BTN_RIGHT) == EV_PRESSED) {
    sys.os.wake();
    sys.gui.setEvent(btn_n, EV_RELEASED);
  }

  if (sys.hw.btn.getEvent(BTN_LEFT) == EV_PRESSED) {
    sys.os.wake();
    sys.gui.setEvent(btn_p, EV_RELEASED);
  }

  if (sys.gui.getEventC(btn_p) == EV_RELEASED) {
    ds_vol(sys.gui.getValue(vol_sld));
    if (sys.time.get() - startTime > 3) {
      if (currentSong != 0) {
        play_no(currentSong);
      }
    } else {
      if (prevSongs[0] != 0) {
        play_no(prevSongs[0]);
        local x;
        for (x = 0; x < 14; x++;) {
          prevSongs[x] = prevSongs[x + 1];
        }
        prevSongs[14] = 0;
      }
    }
  }

  sys.hw.btn.clrEvent(BTN_LEFT);
  sys.hw.btn.clrEvent(BTN_RIGHT);

  if (sys.gui.getEventC(vol_sld)) {
    ds_vol(sys.gui.getValue(vol_sld));
  }

  if (sys.hw.btn.getEvent(BTN_UP) == EV_PRESSED) {
    sys.os.wake();
    if (sys.gui.getValue(vol_sld) < 30) {
      sys.gui.setValue(vol_sld, sys.gui.getValue(vol_sld) + 1);
      sys.gui.setEvent(vol_sld, EV_RELEASED);
    }
  }

  if (sys.hw.btn.getEvent(BTN_DOWN) == EV_PRESSED) {
    sys.os.wake();
    if (sys.gui.getValue(vol_sld) > 0) {
      sys.gui.setValue(vol_sld, sys.gui.getValue(vol_sld) - 1);
      sys.gui.setEvent(vol_sld, EV_RELEASED);
    }
  }
  sys.hw.btn.clrEvent(BTN_UP);
  sys.hw.btn.clrEvent(BTN_DOWN);

}

function exit {
  sys.fs.conf.write("volume", "" + sys.gui.getValue(vol_sld));
  ds_pause();
  sys.hw.iPinDef(15, PIN_IN, 0);
  sys.hw.iPinSet(16, 0);
}
