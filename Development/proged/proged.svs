 # this is still more-less proof of concept

 # os now has native keyboard support
import "lib/inc/ddm.svs"


function init {
  scr = sys.gui.addScreen();

  sys.os.gui.setMainScr(scr);

  sys.gui.setRelInit(1);

  textscreen = sys.gui.addScreen(0, 1, 9, 11, scr);

  sys.gui.setBgRedraw(textscreen, 0);

  txt = sys.gui.addText(1, 0, 20, 15, "", textscreen);
  
  liner = sys.gui.addText(0, 0, 1, 40, "", textscreen);

  sld = sys.gui.addSliderV(9, 2, 1, 9, 100, 1, scr);
  sld2 = sys.gui.addSliderH(1, 12, 7, 1, 320, 1, scr);
  
  btn_up = sys.gui.addButton(9, 1, 1, 1, "/\\", scr);
  btn_dn = sys.gui.addButton(9, 11, 1, 1, "\\/", scr);
  
  btn_menu = sys.gui.addButton(0, 0, 5, 1, "Menu", scr);
  
  fnameT = sys.gui.addText(0, 13, 10, 1, "Proged-X 1.0", scr);

  sys.gui.setTexEd(txt, 1);
  sys.gui.setTxtSize(txt, 12);
  sys.gui.setTxtSize(liner, 12);

  cPosOld = 0;
  gc_clean = 0;

  program = "";
  filename = "";
  fileRoot = 0; # root in /DATA
  
  if (typeof(arg0) == TYPE_STR) {
    if (arg0 != "") {
      filename = arg0;
      fileRoot = arg1;
    } else {
      filename = "";
    }
  } else {
    filename = "";
  }
  
  if (filename != "") {
    sys.fs.chDir(fileRoot);
    if (sys.fs.exists(filename)) {
      program = sys.fs.readStr(filename);
      resize_bar();
      sys.gui.setStr(fnameT, "Editing: " + filename);
    }
  }
  
  textOvr = 0;
  menuOvr = 0;
  
  sld_old = -1;
  cfg_load();
  ddm_init();
  
  dmenu = 0;
  
  kbdStateOld = 0;
}

function ui_transform {
  if (sys.os.gui.getLandscape() == 0) {
    if (sys.os.kbdGetState() == 1) {
      sys.gui.setXYXY(textscreen, 0, 1, 10, 11);
      sys.gui.setVisible(sld, 0);
      sys.gui.setXYXY(btn_up, 7, 0, 1, 1);
      sys.gui.setXYXY(btn_dn, 8, 0, 1, 1);
    } else {
      sys.gui.setXYXY(btn_menu, 0, 0, 5, 1);
      sys.gui.setXYXY(fnameT, 0, 13, 10, 1);
      sys.gui.setXYXY(textscreen, 0, 1, 9, 11);
      sys.gui.setXYXY(sld2,1, 12, 7, 1);
      sys.gui.setVisible(sld, 1);
      sys.gui.setXYXY(sld, 9, 2, 1, 9);
      sys.gui.setXYXY(btn_up, 9, 1, 1, 1);
      sys.gui.setXYXY(btn_dn, 9, 11, 1, 1);
    }
  }
  
  if (sys.os.gui.getLandscape() == 1) {
    if (sys.os.kbdGetState() == 1) {
      sys.gui.setXYXY(fnameT, 0, 8, 10, 1);
      sys.gui.setXYXY(btn_menu, 9, 7, 5, 1);
      sys.gui.setXYXY(textscreen, 0, 0, 14, 7);
      sys.gui.setVisible(sld, 0);
      sys.gui.setXYXY(btn_up, 14, 1, 1, 1);
      sys.gui.setXYXY(btn_dn, 14, 3, 1, 1);
    } else {
      sys.gui.setXYXY(fnameT, 0, 8, 10, 1);
      sys.gui.setXYXY(btn_menu, 9, 7, 5, 1);
      sys.gui.setXYXY(sld2, 0, 7, 7, 1);
      sys.gui.setXYXY(textscreen, 0, 0, 14, 7);
      sys.gui.setVisible(sld, 1);
      sys.gui.setXYXY(sld, 14, 2, 1, 4);
      sys.gui.setXYXY(btn_up, 14, 1, 1, 1);
      sys.gui.setXYXY(btn_dn, 14, 6, 1, 1);
    }
  }
}

function cfg_load {
  sys.fs.chDir(0);
  sys.fs.conf.open("settings/proged.cfg");
  sys.gui.setVisible(liner, sys.fs.conf.readInt("liner", 0));
  sys.gui.setX1(txt, sys.fs.conf.readInt("liner", 0));
  sys.fs.conf.close();
  sys.fs.chDir(fileRoot);
}

function cfg_store {
  sys.fs.chDir(0);
  sys.fs.conf.open("settings/proged.cfg");
  sys.fs.conf.write("liner", "" + sys.gui.getVisible(liner));
  sys.fs.conf.close();
  sys.fs.chDir(fileRoot);
}

function resize_bar {
  local cnt = 0;
  #*
  for(local i = 0; i < len(program); i++;) {
    if (getcp(program, i) == "\n") {
      cnt++;
    }
  }
  *#
  cnt = (sys.ds.getTextHeight(program)/18);
  
  sys.gui.setParam(sld, cnt*13 + 50);
  sys.gui.setY2(txt, cnt/2 + 14);
}


function update {
  program = sys.os.gui.handleText(txt, program);
  if (len(program) > 8000) { 
    if (cPosOld != sys.gui.getParam(txt)) {
      gc_clean = 2;
      cPosOld = sys.gui.getParam(txt);
    }
  }
  
  if (gc_clean != 0) {
    sys.profiler(1);
    gc(100000);
    sys.profiler(0);
    print("collecting");
    gc_clean--;
  }

  newOvrUpdate();
  menuOvUpdate();
  
  if (sys.gui.getEventC(btn_menu) == EV_RELEASED) {
    dmenu = ddm_create(btn_menu);
      ddm_add_btn("New");
      ddm_add_btn("Open");
      ddm_add_btn("Run");
      ddm_add_btn("Save");
      ddm_add_btn("Save as ...");
      ddm_add_btn("Rotate screen");
      ddm_add_btn("Options");
      if (fileRoot == 0 or filename == "") {
        ddm_gray(3, 1);
      }
  }
  
  if (sys.gui.getEventC(btn_up) == EV_RELEASED) {
    if (sys.gui.getValue(sld) > 16) {
      sys.gui.setValue(sld, sys.gui.getValue(sld) - 16);
    } else {
      sys.gui.setValue(sld, 0);
    }
  }
  
  if (sys.gui.getEventC(btn_dn) == EV_RELEASED) {
    if (sys.gui.getValue(sld) < sys.gui.getParam(sld)) {
      sys.gui.setValue(sld, sys.gui.getValue(sld) + 16);
    } else {
      sys.gui.setParam(sld, sys.gui.getParam(sld) + 32);
      sys.gui.setY2(txt, sys.gui.getY2(txt) + 1);
      sys.gui.setValue(sld, sys.gui.getParam(sld));
    }
  }

  sys.gui.setYscroll(textscreen, sys.gui.getValue(sld));
  sys.gui.setXscroll(textscreen, sys.gui.getValue(sld2));
  
  upd_liner();
  
  d = ddm_handle(dmenu);
  if (d > 0) {
    if (d == 1) { # new
      new_store = 0;
      sys.os.subProcess("lib/fsl2.svs", &newRet, 0, 0, "-new file.txt");
      return;
    }
    if (d == 2) { # open
      sys.os.subProcess("lib/fsl2.svs", &callRet, 0, 0, 0);
    }
    if (d == 3) { #run
      sys.fs.chDir(fileRoot); # goto apps
      sys.fs.writeStr(program, filename);
      if (fileRoot == 1) {
        sys.os.subProcNC();
        sys.os.subProcess(filename, "", 0, 0, 0);
      }
    }
    if (d == 4) { #save
      if (filename != "") {
        sys.fs.writeStr(program, filename);
      } else {
        sys.os.subProcess("lib/fsl2.svs", &saveRet, "", 1, "-new file.txt");
      }
    }
    if (d == 5) { #save as
      sys.os.subProcess("lib/fsl2.svs", &saveRet, filename, fileRoot, "-new file.txt");
    }
    if (d == 6) { # rotate
      sys.os.gui.setLandscape(1 - sys.os.gui.getLandscape());
      #TODO: handle layout
    }
    if (d == 7) { # options
      menuOvInit();
      return;
    }
    ddm_exit();
  }
  
  if (sys.os.kbdGetState() != kbdStateOld) {
    ui_transform();
  }
  
  if (sys.os.gui.getLandscape() != landscapeOld) {
    ui_transform();
  }
  
  landscapeOld = sys.os.gui.getLandscape();
  kbdStateOld = sys.os.kbdGetState();
  
  sys.os.gui.btnCtrl(scr, 0);
}

function upd_liner {

  if (sys.gui.getYscroll(textscreen) == sld_old or sys.gui.getVisible(liner) == 0)
    return;

  sld_old = sys.gui.getYscroll(textscreen);

  local s = "";
  local i;
  
  sys.gui.setY1(liner, sys.gui.getYscroll(textscreen) / 32);
  sys.gui.setY2(liner, sys.gui.getYscroll(textscreen) / 32 + 80);
  
  for (i = 1; i < 20; i++;) {
    s += sys.gui.getYscroll(textscreen)/14 + i + "\n";
  }
  sys.gui.setStr(liner, s);
}


function callRet {
  filename = arg0;
  sys.fs.chDir(arg1);
  fileRoot = arg1;
  
  program = "";
  sys.gui.setStr(liner, "");
  sys.gui.setStr(txt, "");
  gc(10000);
  if (sys.fs.exists(filename)) {
    program = sys.fs.readStr(filename);
    sys.gui.setStr(fnameT, "Editing: " + filename);
    upd_liner();
    resize_bar();
  }
}

function saveRet {
  if("" + arg0 == "" or "" + arg0 == "0") {
    return;
  }

  filename = arg0;
  sys.fs.chDir(arg1);
  fileRoot = arg1;
  
  sys.fs.writeStr(program, filename);
  sys.gui.setStr(fnameT, "Editing: " + filename);
}

function newRet {
  if("" + arg0 == "" or "" + arg0 == "0") {
    return;
  }

  filename = arg0;
  sys.fs.chDir(arg1);
  fileRoot = arg1;
  
  program = "";
  resize_bar();
  sys.gui.setStr(fnameT, "Editing: " + filename);
}


function menuOvInit {
  menuScr = sys.gui.addScreen();
  
  sys.gui.addText(1, 0, 6, 1,"Options", menuScr);
  
  btn_lines = sys.gui.addCheckBox(1, 2, 10, 1, "Show lines", menuScr);
  sys.gui.setValue(btn_lines, sys.gui.getVisible(liner));
  

  
  btn_close = sys.gui.addButton(5, 5, 2, 1, "Close", menuScr);
  
  menuOvr = sys.o.setScr(menuScr);
  
  sys.gui.setYscroll(menuScr, -7);
  
  sys.o.setXYXY(32 + 80*sys.os.gui.getLandscape(), 64, 278 +80*sys.os.gui.getLandscape(), 280);

  return menuOvr;
}


function menuOvUpdate {
  if (sys.o.getId() != menuOvr or sys.o.getId() == 0) {
    return;
  }
  
  if (sys.gui.getEventC(btn_lines) == EV_RELEASED) {
    sys.gui.setX1(txt, sys.gui.getValue(btn_lines));
    sys.gui.setVisible(liner, sys.gui.getValue(btn_lines));
    cfg_store();
  }
  
  if (sys.gui.getEventC(btn_close) == EV_RELEASED) {
    sys.o.destroy();
    return;
  }
}

function newOvInit {
  textScr = sys.gui.addScreen();
  sys.gui.addText(1, 0, 8, 1, "New file:", textScr);
  textTxt = sys.gui.addText(1, 1, 6, 1, "", textScr);
  
  textExt1 = sys.gui.addButton(3, 2, 2, 1, ".txt", textScr);
  textExt2 = sys.gui.addButton(5, 2, 2, 1, ".svs", textScr);
  
  textOk = sys.gui.addButton(1, 3, 2, 1, "Ok", textScr);
  textCancel = sys.gui.addButton(4, 3, 3, 1, "Cancel", textScr);
  
  newFileName = "";
  sys.gui.setTexEd(textTxt, 1);
  textOvr = sys.o.setScr(textScr);
  sys.o.setXYXY(32, 64, 278, 222);
  sys.os.showKbd();
  sys.gui.setTexAct(textTxt);
  return textOvr;
}

function newOvrUpdate {
  if (sys.o.getId() != textOvr or sys.o.getId() == 0) {
    return;
  }
  newFileName = sys.os.gui.handleText(textTxt, newFileName);

  if ((sys.gui.getEventC(textOk) == EV_RELEASED) and (newFileName != "") ) {
    if (new_store) {
      filename = newFileName;
      fileRoot = 0;
      if (filename != "") {
        sys.fs.writeStr(program, filename);
        sys.gui.setStr(fnameT, "Editing: " + filename);
        sys.os.hideKbd();
        sys.o.destroy();
      }
    } else {
      filename = newFileName;
      fileRoot = 0;
      program = "";
      resize_bar();
      sys.gui.setStr(fnameT, "Editing: " + filename);
      sys.os.hideKbd();
      sys.o.destroy();
    }
    return;
  }
  
  if (sys.gui.getEventC(textExt1) == EV_RELEASED) {
    newFileName += ".txt";
  }
  
  if (sys.gui.getEventC(textExt2) == EV_RELEASED) {
    newFileName += ".svs";
  }

  if (sys.gui.getEventC(textCancel) == EV_RELEASED) {
    sys.os.hideKbd();
    sys.o.destroy();
    return;
  }
}


